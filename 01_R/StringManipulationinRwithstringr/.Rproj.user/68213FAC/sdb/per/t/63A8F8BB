{
    "collab_server" : "",
    "contents" : "library(stringr)\nlibrary(rebus)\nlibrary(dplyr)\nlibrary(babynames)\nlibrary(stringi)\n\n\n# 1. Chapter 1: String basics -----\n  # Quotes ----\n  # Define line1\n  line1 <- \"The table was a large one, but the three were all crowded together at one corner of it:\"\n  \n  # Define line2\n  line2 <- '\"No room! No room!\" they cried out when they saw Alice coming.'\n  \n  # Define line3\n  line3 <- \"\\\"There's plenty of room!\\\" said Alice indignantly, and she sat down in a large arm-chair at one end of the table.\"\n\n  \n  \n  \n  # What you see isn't always what you have ----\n  # Putting lines in a vector\n  lines <- c(line1, line2, line3)\n  \n  # Print lines\n  print(lines)\n  \n  # Use writeLines() on lines\n  writeLines(lines)\n  \n  # Write lines with a space separator\n  writeLines(lines, sep = \" \")\n  \n  # Use writeLines() on the string \"hello\\n\\U1F30D\"\n  writeLines(\"hello\\n\\U1F30D\")\n  \n  \n  # Escape sequences ----\n  # Should display: To have a \\ you need \\\\\n  writeLines(\"To have a \\\\ you need \\\\\\\\\")\n  \n  # Should display: \n  # This is a really \n  # really really \n  # long string\n  writeLines(\"This is a really \\n really really \\n long string\")\n  \n  # Use writeLines() with \n  # \"\\u0928\\u092e\\u0938\\u094d\\u0924\\u0947 \\u0926\\u0941\\u0928\\u093f\\u092f\\u093e\"\n  \n  # you just said \"Hello World\" in Hindi!\n  print(\"\\u0928\\u092e\\u0938\\u094d\\u0924\\u0947 \\u0926\\u0941\\u0928\\u093f\\u092f\\u093e\")\n  # georgian\n  print(\"\\u10D9\\u10D0\\u10E0\\u10D2\\u10D8\")\n  \n  \n  \n  \n  # Using format() with numbers ----\n  # Some vectors of numbers\n  percent_change  <- c(4, -1.91, 3.00, -5.002)\n  income <-  c(72.19, 1030.18, 10291.93, 1189192.18)\n  p_values <- c(0.12, 0.98, 0.0000191, 0.00000000002)\n  \n  # Format c(0.0011, 0.011, 1) with digits = 1\n  format(c(0.0011, 0.011, 1), digits = 1)\n  \n  # Format c(1.0011, 2.011, 1) with digits = 1\n  format(c(1.0011, 2.011, 1), digits = 1)\n  \n  # Format percent_change to one place after the decimal point\n  format(percent_change, digits = 2)\n  \n  # Format income to whole numbers\n  format(income, digits = 2)\n  \n  # Format p_values in fixed format\n  format(p_values, scientific = FALSE)\n  \n  \n  # Controlling other aspects of the string ----\n  formatted_income <- format(income, digits = 2)\n  \n  # Print formatted_income\n  print(formatted_income)\n  \n  # Call writeLines() on the formatted income\n  writeLines(formatted_income)\n  \n  # Define trimmed_income\n  trimmed_income <- format(income, digits = 2, trim = TRUE)\n  \n  # Call writeLines() on the trimmed_income\n  writeLines(trimmed_income)\n  \n  # Define pretty_income\n  pretty_income <- format(income, digits = 2, big.mark = \",\")\n\n  # Call writeLines() on the pretty_income\n  writeLines(pretty_income)\n\n  \n  \n  # formatC() ----\n  # From the format() exercise\n  x <- c(0.0011, 0.011, 1)\n  y <- c(1.0011, 2.011, 1)\n  \n  # formatC() on x with format = \"f\", digits = 1\n  formatC(x, format = \"f\", digits = 1)\n  \n  # formatC() on y with format = \"f\", digits = 1\n  formatC(y, format = \"f\", digits = 1)\n  \n  # Format percent_change to one place after the decimal point; \"f\" for fixed; \"e\" for scientific\n  formatC(percent_change, format = \"f\", digits = 1)\n  \n  # percent_change with flag = \"+\"\n  formatC(percent_change, format = \"f\", digits = 1, flag = \"+\")\n  \n  # Format p_values using format = \"g\" and digits = 2; \"g\" for fixed unless scientific saves space\n  formatC(p_values, format = \"g\", digits = 2)\n  \n  \n  \n  # Annotation of numbers ----\n  pretty_income <- formatC(income, digits = 0, big.mark = \",\", format = \"f\")\n  pretty_percent <- formatC(percent_change, digits = 1, format = \"f\")\n  years <- c(2010, 2011, 2012, 2013)\n  \n  # Add $ to pretty_income\n  paste(\"$\", pretty_income, sep = \"\")\n  \n  # Add % to pretty_percent\n  paste(pretty_percent, \"%\", sep = \"\")\n  \n  # Create vector with elements like 2010: +4.0%`\n  year_percent <- paste(paste(years, \":\", sep = \"\"), paste(pretty_percent, \"%\", sep = \"\"))\n  \n  # Collapse all years into single string\n  paste(year_percent, collapse = \",\")\n  \n  \n  \n  # A very simple table ----\n  # Define the names vector\n  income_names <- c(\"Year 0\", \"Year 1\", \"Year 2\", \"Project Lifetime\")\n  \n  # Create pretty_income\n  pretty_income <- format(income, digits = 2, big.mark = \",\")\n  \n  # Create dollar_income\n  dollar_income <- paste(\"$\", pretty_income, sep = \"\")\n  \n  # Create formatted_names\n  formatted_names <- format(income_names, justify = \"right\")\n  \n  # Create rows\n  rows <- paste (formatted_names, dollar_income, sep = \"   \")\n  \n  # Write rows\n  writeLines(rows)\n  \n  \n  \n  # Let's order pizza! ----\n  toppings <- c(\"anchovies\",\n                \"artichoke\",\n                \"bacon\",\n                \"breakfast bacon\",\n                \"Canadian bacon\",\n                \"cheese\",\n                \"chicken\",\n                \"chili peppers\",\n                \"feta\",\n                \"garlic\",\n                \"green peppers\",\n                \"grilled onions\",\n                \"ground beef\",\n                \"ham\",\n                \"hot sauce\",\n                \"meatballs\",\n                \"mushrooms\",\n                \"olives\",\n                \"onions\",\n                \"pepperoni\",\n                \"pineapple\",\n                \"sausage\",\n                \"spinach\",\n                \"sun-dried tomato\",\n                \"tomatoes\")\n  # Randomly sample 3 toppings\n  my_toppings <- sample(toppings, size = 3)\n  \n  # Print my_toppings\n  my_toppings\n  \n  # Paste \"and \" to last element: my_toppings_and\n  my_toppings_and <- paste(c(\"\",\"\",\"and \"), my_toppings, sep = \"\")\n  \n  # Collapse with comma space: these_toppings\n  these_toppings <- paste(my_toppings_and, collapse = \", \")\n  \n  # Add rest of sentence: my_order\n  my_order <- paste(\"I want to order a pizza with\", paste(these_toppings, \".\", sep = \"\"))\n  \n  # Order pizza with writeLines()\n  writeLines(my_order)\n  \n  \n  \n# 2. Chapter 2: Introduction to stringr -----\n  # Putting strings together with stringr ----\n  library(stringr)\n  \n  my_toppings <- c(\"cheese\", NA, NA)\n  my_toppings_and <- paste(c(\"\", \"\", \"and \"), my_toppings, sep = \"\")\n  \n  # Print my_toppings_and\n  my_toppings_and\n  \n  # Use str_c() instead of paste(): my_toppings_str\n  my_toppings_str <- str_c(c(\"\", \"\", \"and \"), my_toppings)\n  \n  # Print my_toppings_str\n  my_toppings_str\n  \n  # paste() my_toppings_and with collapse = \", \"\n  paste(my_toppings_and, collapse = \", \")\n  \n  # str_c() my_toppings_str with collapse = \", \"\n  str_c(my_toppings_str, collapse = \", \")\n  \n  \n  \n  # String length ----\n  # Extracting vectors for boys' and girls' names\n  babynames_2014 <- filter(babynames, year == 2014)\n  boy_names <- filter(babynames_2014, sex == \"M\")$name\n  girl_names <- filter(babynames_2014, sex == \"F\")$name\n  \n  # Take a look at a few boy_names\n  head(boy_names)\n  \n  # Find the length of all boy_names\n  boy_length <- str_length(boy_names)\n  \n  # Take a look at a few lengths\n  head(boy_length)\n  \n  # Find the length of all girl_names\n  girl_length <- str_length(girl_names)\n  \n  # Find the difference in mean length\n  mean(girl_length) - mean(boy_length)\n  \n  # Confirm str_length() works with factors\n  head(str_length(factor(boy_names)))\n  \n  # Just be aware this is a naive average where each name is counted once, \n  # not weighted by how many babies recevied the name. A better comparison might be an average weighted \n  # by the n column in babynames. \n  \n  \n  \n  \n  # Extracting substrings ----\n  # The big advantage of str_sub() is the ability to use negative indexes to count from the end of a string. \n  # Extract first letter from boy_names\n  boy_first_letter <- str_sub(boy_names, 1, 1)\n  \n  # Tabulate occurrences of boy_first_letter\n  table(boy_first_letter)\n  \n  # Extract the last letter in boy_names, then tabulate\n  boy_last_letter <- str_sub(boy_names, -1, -1)\n  table(boy_last_letter)\n  \n  # Extract the first letter in girl_names, then tabulate\n  girl_first_letter <- str_sub(girl_names,1, 1)\n  table(girl_first_letter)\n  \n  # Extract the last letter in girl_names, then tabulate\n  girl_last_letter <- str_sub(girl_names, -1, -1)\n  table(girl_last_letter)\n  \n  \n  \n  # Detecting matches ----\n  # Look for pattern \"zz\" in boy_names\n  contains_zz <- str_detect(boy_names, \"zz\")\n  \n  # Examine str() of contains_zz\n  str(contains_zz)\n  \n  # How many names contain \"zz\"?\n  sum(contains_zz)\n  \n  # Which names contain \"zz\"?\n  boy_names[contains_zz]\n  \n\n  \n  \n  # Subsetting strings based on match ----\n  # Find boy_names that contain \"zz\"\n  str_subset(boy_names, \"zz\")\n  \n  # Find girl_names that contain \"zz\"\n  str_subset(girl_names, \"zz\")\n  \n  # Find girl_names that contain \"U\"\n  starts_U <- str_subset(boy_names, \"U\")\n  \n  # Find girl_names that contain \"U\" and \"z\"\n  str_subset(starts_U, \"z\")\n  \n  \n  \n  # Counting matches----\n  # Count occurrences of \"a\" in girl_names\n  number_as <- str_count(girl_names, \"a\")\n  \n  # Count occurrences of \"A\" in girl_names\n  number_As <- str_count(girl_names, \"A\")\n  \n  # Histograms of number_as and number_As\n  hist(number_as)\n  hist(number_As)\n  \n  # Find total \"a\" + \"A\"\n  total_as <- number_as + number_As\n  \n  # girl_names with more than 4 a's\n  girl_names[total_as > 4]\n  \n  \n  \n  \n  # Parsing strings into variables ----\n  date_ranges <- c(\"23.01.2017 - 29.01.2017\", \"30.01.2017 - 06.02.2017\")\n  \n  # Split dates using \" - \"\n  split_dates <- str_split(date_ranges, fixed(\" - \"))\n  \n  # Print split_dates\n  split_dates\n  \n  # Split dates with n and simplify specified\n  split_dates_n <- str_split(date_ranges, fixed(\" - \"), simplify = TRUE, n = 2)\n  split_dates_n\n  \n  # Subset split_dates_n into start_dates and end_dates\n  start_dates <- split_dates_n[,1]\n  end_dates <- split_dates_n[,2]\n  \n  # Split start_dates into day, month and year pieces\n  str_split(start_dates, fixed(\".\"), simplify =TRUE,  n = 3)\n  \n  # Split both_names into first_names and last_names\n  both_names <- c(\"Box, George\", \"Cox, David\")\n  both_names_split <- str_split(both_names, fixed(\", \"), simplify = TRUE, n = 2)\n  first_names <- both_names_split[,2]\n  last_names <- both_names_split[,1]\n  \n  \n  \n  # Some simple text statistics ----\n  lines <- c(\n  \"The table was a large one, but the three were all crowded together at one corner of it:\"                                  \n  , \"\\\"No room! No room!\\\" they cried out when they saw Alice coming.\"                                                         \n  , \"\\\"There’s plenty of room!\\\" said Alice indignantly, and she sat down in a large arm-chair at one end of the table.\"\n  )\n  # Split lines into words\n  words <- str_split(lines, fixed(\" \"))\n  \n  # Number of words per line\n  lapply(words, length)\n  \n  # Number of characters in each word\n  word_lengths <- lapply(words, str_length)\n  \n  # Average word length per line\n  lapply(word_lengths, mean)\n  \n  \n  \n  # Replacing to tidy strings ----\n  ids <- c(\"ID#: 192\", \"ID#: 118\", \"ID#: 001\")\n  \n  # Replace \"ID#: \" with \"\"\n  id_nums <- str_replace_all(ids, pattern = \"ID#: \", replace = \"\")\n  \n  # Turn id_nums into numbers\n  id_ints <- as.numeric(id_nums)\n  \n  # Some (fake) phone numbers\n  phone_numbers <- c(\"510-555-0123\", \"541-555-0167\")\n  \n  # Use str_replace() to replace \"-\" with \" \"\n  str_replace(phone_numbers, pattern = \"-\", replace = \" \")\n  \n  # Use str_replace_all() to replace \"-\" with \" \"\n  str_replace_all(phone_numbers, pattern = \"-\", replace = \" \")\n  \n  # Turn phone numbers into the format xxx.xxx.xxxx\n  str_replace_all(phone_numbers, pattern = \"-\", replace = \".\")\n  \n  \n  \n  \n  # Review ----\n  genes <- c(\n  \"TTAGAGTAAATTAATCCAATCTTTGACCCAAATCTCTGCTGGATCCTCTGGTATTTCATGTTGGATGACGTCAATTTCTAATATTTCACCCAACCGTTGAGCACCTTGTGCGATCAATTGTTGATCCAGTTTTATGATTGCACCGCAGAAAGTGTCATATTCTGAGCTGCCTAAACCAACCGCCCCAAAGCGTACTTGGGATAAATCAGGCTTTTGTTGTTCGATCTGTTCTAATAATGGCTGCAAGTTATCAGGTAGATCCCCGGCACCATGAGTGGATGTCACGATTAACCACAGGCCATTCAGCGTAAGTTCGTCCAACTCTGGGCCATGAAGTATTTCTGTAGAAAACCCAGCTTCTTCTAATTTATCCGCTAAATGTTCAGCAACATATTCAGCACTACCAAGCGTACTGCCACTTATCAACGTTATGTCAGCCAT\" \n  , \"TTAAGGAACGATCGTACGCATGATAGGGTTTTGCAGTGATATTAGTGTCTCGGTTGACTGGATCTCATCAATAGTCTGGATTTTGTTGATAAGTACCTGCTGCAATGCATCAATGGATTTACACATCACTTTAATAAATATGCTGTAGTGGCCAGTGGTGTAATAGGCCTCAACCACTTCTTCTAAGCTTTCCAATTTTTTCAAGGCGGAAGGGTAATCTTTGGCACTTTTCAAGATTATGCCAATAAAGCAGCAAACGTCGTAACCCAGTTGTTTTGGGTTAACGTGTACACAAGCTGCGGTAATGATCCCTGCTTGCCGCATCTTTTCTACTCTTACATGAATAGTTCCGGGGCTAACAGCGAGGTTTTTGGCTAATTCAGCATAGGGTGTGCGTGCATTTTCCATTAATGCTTTCAGGATGCTGCGATCGAGATTATCGATCTGATAAATTTCACTCAT\" \n  , \"ATGAAAAAACAATTTATCCAAAAACAACAACAAATCAGCTTCGTAAAATCATTCTTTTCCCGCCAATTAGAGCAACAACTTGGCTTGATCGAAGTCCAGGCTCCTATTTTGAGCCGTGTGGGTGATGGAACCCAAGATAACCTTTCTGGTTCTGAGAAAGCGGTACAGGTAAAAGTTAAGTCATTGCCGGATTCAACTTTTGAAGTTGTACATTCATTAGCGAAGTGGAAACGTAAAACCTTAGGGCGTTTTGATTTTGGTGCTGACCAAGGGGTGTATACCCATATGAAAGCATTGCGCCCAGATGAAGATCGCCTGAGTGCTATTCATTCTGTATATGTAGATCAGTGGGATTGGGAACGGGTTATGGGGGACGGTGAACGTAACCTGGCTTACCTGAAATCGACTGTTAACAAGATTTATGCAGCGATTAAAGAAACTGAAGCGGCGATCAGTGCTGAGTTTGGTGTGAAGCCTTTCCTGCCGGATCATATTCAGTTTATCCACAGTGAAAGCCTGCGGGCCAGATTCCCTGATTTAGATGCTAAAGGCCGTGAACGTGCAATTGCCAAAGAGTTAGGTGCTGTCTTCCTTATAGGGATTGGTGGCAAATTGGCAGATGGTCAATCCCATGATGTTCGTGCGCCAGATTATGATGATTGGACCTCTCCGAGTGCGGAAGGTTTCTCTGGATTAAACGGCGACATTATTGTCTGGAACCCAATATTGGAAGATGCCTTTGAGATATCTTCTATGGGAATTCGTGTTGATGCCGAAGCTCTTAAGCGTCAGTTAGCCCTGACTGGCGATGAAGACCGCTTGGAACTGGAATGGCATCAATCACTGTTGCGCGGTGAAATGCCACAAACTATCGGGGGAGGTATTGGTCAGTCCCGCTTAGTGATGTTATTGCTGCAGAAACAACATATTGGTCAGGTGCAATGTGGTGTTTGGGGCCCTGAAATCAGCGAGAAAGTTGATGGCCTGCTGTAA\"\n  )\n  # Find the number of nucleotides in each sequence\n  str_length(genes)\n  \n  # Find the number of A's occur in each sequence\n  str_count(genes, pattern = \"A\")\n  \n  # Return the sequences that contain \"TTTTTT\"\n  str_subset(genes, pattern = \"TTTTTT\")\n  \n  # Replace all the \"A\"s in the sequences with a \"_\"\n  str_replace_all(genes, pattern = \"A\", replace = \"_\")\n  \n  \n  \n  # Final challenges ----\n  # --- Task 1 ----\n  # Define some full names\n  names <- c(\"Diana Prince\", \"Clark Kent\")\n  \n  # Split into first and last names\n  names_split <- str_split(names, fixed(\" \"), simplify = TRUE, n = 2)\n  \n  # Extract the first letter in the first name\n  abb_first <- str_sub(names_split[,1], 1, 1)\n  \n  # Combine the first letter \". \" and last name\n  str_c(abb_first, c(\". \",\". \"), names_split[,2])\n  \n  # --- Task 2 ----\n  # Use all names in babynames_2014\n  all_names <- babynames_2014$name\n  \n  # Get the last two letters of all_names\n  last_two_letters <- str_sub(all_names, -2, -1)\n  \n  # Does the name end in \"ee\"?\n  ends_in_ee <- str_detect(last_two_letters, \"ee\")\n  \n  # Extract rows and \"sex\" column\n  sex <- babynames_2014[ends_in_ee,]$sex\n  \n  # Display result as a table\n  table(sex)\n  \n  \n  \n  \n# 3. Chapter 3: Pattern matching with regular expressions -----\n  # Matching the start or end of the string ----\n  library(rebus)\n  library(stringr)\n  \n  # Some strings to practice with\n  x <- c(\"cat\", \"coat\", \"scotland\", \"tic toc\")\n  \n  # Print END\n  END\n  \n  # Run me\n  str_view(x, pattern = START %R% \"c\")\n  \n  # Match the strings that start with \"co\" \n  str_view(x, pattern = START %R% \"co\")\n  \n  # Match the strings that end with \"at\"\n  str_view(x, pattern = \"at\" %R% END)\n  \n  # Match the strings that is exactly \"cat\"\n  str_view(x, pattern = START %R% \"cat\" %R% END)\n  \n  \n  \n  # Matching any character ----\n  x <- c(\"cat\", \"coat\", \"scotland\", \"tic toc\")\n  \n  # Match any character followed by a \"t\"\n  str_view(x, pattern = ANY_CHAR %R% \"t\")\n  \n  # Match a \"t\" followed by any character\n  str_view(x, pattern = \"t\" %R% ANY_CHAR)\n  \n  # Match two characters\n  str_view(x, pattern = ANY_CHAR %R% ANY_CHAR)\n  \n  # Match a string with exactly three characters\n  str_view(x, pattern = START %R% ANY_CHAR %R% ANY_CHAR %R% ANY_CHAR %R% END)\n  \n  \n  \n  # Combining with stringr functions ----\n  # q followed by any character\n  pattern <- \"q\" %R% ANY_CHAR\n  \n  # Test pattern \n  str_view(c(\"Quentin\", \"Kaliq\", \"Jacques\",  \"Jacqes\"), pattern)  \n  \n  # Find names that have the pattern\n  names_with_q <- str_subset(boy_names, pattern)\n  length(names_with_q)\n  \n  # Find part of name that matches pattern\n  part_with_q <- str_extract(boy_names, pattern)\n  table(part_with_q)\n  \n  # Did any names have the pattern more than once?\n  count_of_q <- str_count(boy_names, pattern)\n  table(count_of_q)\n  \n  # How many babies got these names?\n  with_q <- str_detect(boy_names, pattern)\n  boy_df[with_q, ]\n  \n  \n  \n  \n  # Alternation ----\n  # Match Jeffrey or Geoffrey\n  whole_names <- or(\"Jeffrey\", \"Geoffrey\")\n  str_view(boy_names, pattern = whole_names, \n           match = TRUE)\n  \n  # Match Jeffrey or Geoffrey, another way\n  common_ending <- or(\"Je\", \"Geo\") %R% \"ffrey\"\n  str_view(boy_names, pattern = common_ending, \n           match = TRUE)\n  \n  # Match with alternate endings\n  by_parts <- or(\"Je\", \"Geo\") %R% \"ff\" %R% or(\"ry\", \"ery\", \"rey\", \"erey\")\n  str_view(boy_names, \n           pattern = by_parts, \n           match = TRUE)\n  \n  # Match names that start with Cath or Kath\n  ckath <- START %R% or(\"C\",\"K\") %R% \"ath\"\n  str_view(girl_names, pattern = ckath, match = TRUE)\n  \n  \n  \n  # Character classes ----\n  x <- c( \"grey sky\", \"gray elephant\")\n  # Create character class containing vowels\n  vowels <- char_class(\"aeiouAEIOU\")\n  \n  # Print vowels\n  vowels\n  \n  # See vowels in x with str_view()\n  str_view(x, pattern = vowels, match = TRUE)\n  \n  # See vowels in x with str_view_all()\n  str_view_all(x, pattern = vowels, match = TRUE)\n  \n  # Number of vowels in boy_names\n  num_vowels <- str_count(boy_names, pattern = vowels)\n  mean(num_vowels)\n  \n  # Proportion of vowels in boy_names\n  name_length <- str_length(boy_names)\n  mean(num_vowels/name_length)\n  \n  \n  # Repetition ----\n  # Vowels from last exercise\n  vowels <- char_class(\"AEIOUaeiou\")\n  \n  # Use `negated_char_class()` for everything but vowels\n  not_vowels <- negated_char_class(\"AEIOUaeiou\")\n  \n  # See names with only vowels\n  str_view(boy_names, \n           pattern = START %R% one_or_more(vowels) %R% END, \n           match = TRUE)\n  \n  # See names with no vowels\n  str_view(boy_names, \n           pattern = START %R% one_or_more(not_vowels) %R% END, \n           match = TRUE)\n  \n  \n  \n  # Hunting for phone numbers ----\n  contact <- c(\n    \"Call me at 555-555-0191\",                 \n    \"123 Main St\",                             \n    \"(555) 555 0191\",                          \n    \"Phone: 555.555.0191 Mobile: 555.555.0192\"\n    )\n  \n  # Take a look at ALL digits\n  str_view_all(contact, DGT)\n  \n  # Create a three digit pattern and test\n  three_digits <- DGT %R% DGT %R% DGT\n  str_view_all(contact,\n               pattern = three_digits)\n  \n  # Create four digit pattern\n  four_digits <- three_digits %R% DGT\n  \n  # Create a separator pattern and test\n  separator <- char_class(\"-.() \")\n  str_view_all(contact,\n               pattern = separator)\n  \n  # Create phone pattern\n  phone_pattern <- three_digits %R% \n    zero_or_more(separator) %R% \n    three_digits %R% \n    zero_or_more(separator) %R%\n    four_digits\n  \n  # Test pattern           \n  str_view(contact, pattern = phone_pattern)\n  \n  # Extract phone numbers\n  str_extract(contact, phone_pattern)\n  \n  # Extract ALL phone numbers\n  str_extract_all(contact, phone_pattern)\n  \n  \n  \n  # Extracting age and gender from accident narratives ----\n  narratives <- c(\n    \"19YOM-SHOULDER STRAIN-WAS TACKLED WHILE PLAYING FOOTBALL W/ FRIENDS \",                      \n    \"31 YOF FELL FROM TOILET HITITNG HEAD SUSTAINING A CHI \",                                    \n    \"ANKLE STR. 82 YOM STRAINED ANKLE GETTING OUT OF BED \",                                      \n    \"TRIPPED OVER CAT AND LANDED ON HARDWOOD FLOOR. LACERATION ELBOW, LEFT. 33 YOF*\",            \n    \"10YOM CUT THUMB ON METAL TRASH CAN DX AVULSION OF SKIN OF THUMB \",                          \n    \"53 YO F TRIPPED ON CARPET AT HOME. DX HIP CONTUSION \",                                      \n    \"13 MOF TRYING TO STAND UP HOLDING ONTO BED FELL AND HIT FOREHEAD ON RADIATOR DX LACERATION\",\n    \"14YR M PLAYING FOOTBALL; DX KNEE SPRAIN \",                                                  \n    \"55YOM RIDER OF A BICYCLE AND FELL OFF SUSTAINED A CONTUSION TO KNEE \",                      \n    \"5 YOM ROLLING ON FLOOR DOING A SOMERSAULT AND SUSTAINED A CERVICAL STRA IN\"\n    )\n  # Look for two digits\n  str_view(narratives, pattern = DGT %R% DGT)\n  \n  # Pattern to match one or two digits\n  age <- or(DGT, DGT %R% DGT)\n  str_view(narratives, \n           pattern = age)\n  \n  # Pattern to match units \n  unit <- zero_or_more(\" \") %R% or(\"YO\", \"YR\", \"MO\")\n  \n  # Test pattern with age then units\n  str_view(narratives, \n           pattern = age %R% unit)\n  \n  # Pattern to match gender\n  gender <- zero_or_more(\" \") %R% or(\"M\", \"F\")\n  \n  # Test pattern with age then units then gender\n  str_view(narratives, \n           pattern = age %R% unit %R% gender)\n  \n  # Extract age_gender, take a look\n  age_gender <- str_extract(narratives, age %R% unit %R% gender)\n  age_gender\n  \n  \n  \n  # Parsing age and gender into pieces ----\n  # Extract age and make numeric\n  ages_numeric <- as.numeric(str_extract(age_gender, pattern = age))\n  \n  # Replace age and units with \"\"\n  genders <- str_replace(age_gender, \n                         pattern = age %R% unit, \n                         replacement = \"\")\n  \n  # Replace extra spaces\n  genders_clean <- str_replace_all(genders, \n                                   pattern = one_or_more(\" \"), \n                                   replacement = \"\")\n  \n  # Extract units \n  time_units <- str_extract(age_gender, pattern = unit)\n  \n  # Extract first word character\n  time_units_clean <- str_extract(time_units, pattern = WRD)\n  \n  # Turn ages in months to years\n  ages_years <- ifelse(time_units_clean == \"Y\", ages_numeric, ages_numeric/12)\n\n  \n  \n  \n  \n# 4. Chapter 4: More advanced matching and manipulation  -----\n  # !!! Capturing parts of a pattern ----\n  hero_contacts <- c(\n    \"(wolverine@xmen.com)\",\n    \"wonderwoman@justiceleague.org\",\n    \"thor@avengers.com\"\n    )\n  # Capture part between @ and . and after .\n  email <- capture(one_or_more(WRD)) %R% \n    \"@\" %R% capture(one_or_more(WRD)) %R% \n    DOT %R% capture(one_or_more(WRD))\n  \n  # Check match hasn't changed\n  str_view(hero_contacts, pattern = email)\n  \n  # Pull out match and captures\n  email_parts <- str_match(hero_contacts, pattern = email)\n  \n  # Print email_parts\n  email_parts\n  \n  # Save host\n  host <- email_parts[,3]\n  host\n  \n  # detecting an email address can be really hard see this discussion for more details.\n  # http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address/201378#201378\n  \n  \n  \n  \n  \n  # Pulling out parts of a phone number  (s.o.)----\n  # View text containing phone numbers\n  contact\n  \n  # Add capture() to get digit parts\n  phone_pattern <- capture(three_digits) %R% zero_or_more(separator) %R% \n    capture(three_digits) %R% zero_or_more(separator) %R%\n    capture(four_digits)\n  \n  # Pull out the parts with str_match()\n  phone_numbers <- str_match(contact, pattern = phone_pattern)\n  \n  # Put them back together\n  str_c(\n    \"(\",\n    phone_numbers[,2],\n    \")\",\n    phone_numbers[,3],\n    \"-\",\n    phone_numbers[,4]\n  )\n  \n  # The second phone number in the last string, you could use str_match_all(). \n  # But, like str_split() it will return a list with one component for each input string, \n  # and you'll need to use lapply() to handle the result. \n  \n  \n  \n  # Extracting age and gender again -----\n  # narratives has been pre-defined\n  narratives\n  \n  # Add capture() to get age, unit and sex\n  pattern <- capture(optional(DGT) %R% DGT) %R%  \n    optional(SPC) %R% capture(or(\"YO\", \"YR\", \"MO\")) %R%\n    optional(SPC) %R% capture(or(\"M\", \"F\"))\n  \n  # Pull out from narratives\n  str_match(narratives, pattern = pattern)\n  \n  # Edit to capture just Y and M in units\n  pattern2 <- capture(optional(DGT) %R% DGT) %R%  \n    optional(SPC) %R% capture(or(\"Y\", \"M\")) %R% optional(or(\"O\",\"R\")) %R%\n    optional(SPC) %R% capture(or(\"M\", \"F\"))\n  \n  # Check pattern\n  str_view(narratives, pattern2)\n  \n  # Pull out pieces\n  str_match(narratives, pattern2)\n  \n  \n  \n  \n  # Using backreferences in patterns ----\n  boy_names <- tolower((boy_names))\n  # See names with three repeated letters\n  repeated_three_times <- capture(LOWER) %R% REF1 %R% REF1\n  str_view(boy_names, \n           pattern = repeated_three_times, \n           match = TRUE)\n  \n  # See names with a pair of repeated letters\n  pair_of_repeated <- capture(LOWER %R% LOWER) %R% REF1\n  str_view(boy_names, \n           pattern = pair_of_repeated, \n           match = TRUE)\n  \n  # See names with a pair that reverses\n  pair_that_reverses <- capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1\n  str_view(boy_names, \n           pattern = pair_that_reverses, \n           match = TRUE)\n  \n  # See four letter palindrome names\n  four_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% REF2 %R% REF1)\n  str_view(boy_names, \n           pattern = four_letter_palindrome, \n           match = TRUE)\n  \n  # See six letter palindrome names\n  six_letter_palindrome <- exactly(capture(LOWER) %R% capture(LOWER) %R% capture(LOWER) %R% REF3 %R% REF2 %R% REF1)\n  str_view(boy_names, \n           pattern = six_letter_palindrome, \n           match = TRUE)\n  \n  \n  \n  \n  # Replacing with regular expressions ----\n  # View text containing phone numbers\n  contact\n  \n  # Replace digits with \"X\"\n  str_replace(contact, pattern = DGT, replacement = \"X\")\n  \n  # Replace all digits with \"X\"\n  str_replace_all(contact, pattern = DGT, replacement = \"X\")\n  \n  # !!!! Replace all digits with different symbol\n  str_replace_all(contact, pattern = DGT, \n                  replacement = c(\"X\", \".\", \"*\", \"_\"))\n  \n  \n  \n  # Replacing with backreferences ----\n  # Build pattern to match words ending in \"ING\"\n  pattern <- one_or_more(WRD) %R% \"ING\"\n  str_view(narratives, pattern)\n  \n  # Test replacement\n  str_replace(narratives, capture(pattern), str_c(\"CARELESSLY\", REF1, sep = \" \"))\n  \n  # One adverb per narrative\n  adverbs_10 <- sample(adverbs, 10)\n  \n  # Replace \"***ing\" with \"adverb ***ing\"\n  str_replace(narratives, capture(pattern), str_c(adverbs_10, REF1, sep = \" \"))\n  \n  \n  \n  # Matching a specific code point or code groups ----\n  # Names with builtin accents\n  (tay_son_builtin <- c(\n    \"Nguy\\u1ec5n Nh\\u1ea1c\", \n    \"Nguy\\u1ec5n Hu\\u1ec7\",\n    \"Nguy\\u1ec5n Quang To\\u1ea3n\"\n  ))\n  \n  # Convert to separate accents\n  tay_son_separate <- stri_trans_nfd(tay_son_builtin)\n  \n  # Verify that the string prints the same\n  tay_son_separate\n  \n  # Match all accents\n  str_view_all(tay_son_separate, UP_DIACRITIC)\n  \n  \n  \n  # Matching a single grapheme ----\n  # tay_son_separate has been pre-defined\n  tay_son_separate\n  \n  # View all the characters in tay_son_separate\n  str_view_all(tay_son_separate, ANY_CHAR)\n  \n  # View all the graphemes in tay_son_separate\n  str_view_all(tay_son_separate, GRAPHEME)\n  \n  # Combine the diacritics with their letters\n  tay_son_builtin <- stri_trans_nfc(tay_son_separate)\n  \n  # View all the graphemes in tay_son_builtin\n  str_view_all(tay_son_builtin, GRAPHEME)\n  \n  \n  \n  \n# 5. Chapter 5: Case studies -----\n  # Getting the play into R ----\n  url <- \"http://s3.amazonaws.com/assets.datacamp.com/production/course_2922/datasets/importance-of-being-earnest.txt\"\n  download.file(url, \"importance-of-being-earnest.txt\")\n  earnest <- stri_read_lines(\"importance-of-being-earnest.txt\")\n  \n  # Detect start and end lines\n  start <- which(str_detect(earnest, pattern = \"START OF THE PROJECT\"))\n  end   <- which(str_detect(earnest, pattern = \"END OF THE PROJECT\"))\n  \n  # Get rid of gutenberg intro text\n  earnest_sub  <- earnest[(start + 1):(end - 1)]\n  \n  # Detect first act\n  lines_start <- which(str_detect(earnest_sub, pattern = \"FIRST ACT\"))\n  \n  # Set up index\n  intro_line_index <- 1:(lines_start - 1)\n  \n  # Split play into intro and play\n  intro_text <- earnest_sub[intro_line_index]\n  play_text <-  earnest_sub[-intro_line_index]\n  \n  # Take a look at the first 20 lines\n  writeLines(play_text[1:20])\n  \n  \n  \n  # Identifying the lines, take 1 ----\n  \n  # # Get rid of empty strings\n  # empty <- stri_isempty(play_text)\n  # play_lines <- play_text[!empty]\n  \n  # Pattern for start word then .\n  pattern_1 <- START %R% one_or_more(WRD) %R% DOT\n  \n  # Test pattern_1\n  str_view(play_lines, pattern = pattern_1, \n           match = TRUE) \n  str_view(play_lines, pattern = pattern_1, \n           match = FALSE)\n  \n  # Pattern for start, capital, word then .\n  pattern_2 <- START %R% ascii_upper() %R% one_or_more(WRD) %R% DOT\n  \n  # View matches of pattern_2\n  str_view(play_lines, pattern = pattern_2, \n           match = TRUE) \n  \n  # View non-matches of pattern_2\n  str_view(play_lines, pattern = pattern_2, \n           match = FALSE) \n  \n  # Get subset of lines that match\n  lines <- str_subset(play_lines, pattern_2)\n  \n  # Extract match from lines\n  who <- str_extract(lines, pattern_2)\n  \n  # Let's see what we have\n  unique(who)\n  \n  # Good job, but it looks like your pattern wasn't 100% successful. \n  # It missed Lady Bracknell, and picked up lines starting with University., July. and a few others. \n  # Let's try a slighty different strategy. \n  \n  \n  \n  # Identifying the lines, take 2 ----\n  # Create vector of characters\n  characters <- c(\"Algernon\", \"Jack\", \"Lane\", \"Cecily\", \"Gwendolen\", \"Chasuble\", \n                  \"Merriman\", \"Lady Bracknell\", \"Miss Prism\")\n  \n  # !!!! Match start, then character name, then .\n  pattern_3 <- START %R% or1(characters) %R% DOT\n  \n  # View matches of pattern_3\n  str_view(play_lines, pattern_3, match = TRUE)\n  \n  # View non-matches of pattern_3\n  str_view(play_lines, pattern_3, match = FALSE)\n  \n  # Pull out matches\n  lines <- str_subset(play_lines, pattern_3)\n  \n  # Extract match from lines\n  who <- str_extract(lines, pattern_3)\n  \n  # Let's see what we have\n  unique(who)\n  \n  # Count lines per character\n  table(who)\n  \n  # Changing case to ease matching ----\n  \n  catcidents <- c(\n    \"79yOf Fractured fingeR tRiPPED ovER cAT ANd fell to FlOOr lAst nIGHT AT HOME*\"                                                                  \n    ,\"21 YOF REPORTS SUS LACERATION OF HER LEFT HAND WHEN SHE WAS OPENING A CAN OF CAT FOOD JUST PTA. DX HAND LACERATION%\"                            \n    ,\"87YOF TRIPPED OVER CAT, HIT LEG ON STEP. DX LOWER LEG CONTUSION \"                                                                               \n    ,\"bLUNT CHest trAUma, R/o RIb fX, R/O CartiLAgE InJ To RIB cAge; 32YOM walKiNG DOG, dog took OfF aFtER cAt,FelL,stRucK CHest oN STepS,hiT rIbS\"   \n    ,\"42YOF TO ER FOR BACK PAIN AFTER PUTTING DOWN SOME CAT LITTER DX: BACK PAIN, SCIATICA\"                                                           \n    ,\"4YOf DOg jUst hAd PUpPieS, Cat TRIED 2 get PuPpIes, pT THru CaT dwn stA Irs, LoST foOTING & FELl down ~12 stePS; MInor hEaD iNJuRY\"             \n    ,\"unhelmeted 14yof riding her bike with her dog when she saw a cat and sw erved c/o head/shoulder/elbow pain.dx: minor head injury,left shoulder\" \n    ,\"24Yof lifting a 40 pound bag of cat litter injured lt wrist; wrist sprain\"                                                                      \n    ,\"3Yof-foot lac-cut on cat food can-@ home \"                                                                                                      \n    ,\"Rt Shoulder Strain.26Yof Was Walking Dog On Leash And Dot Saw A Cat And Pulled Leash.\"                                                          \n    ,\"15 mO m cut FinGer ON cAT FoOd CAn LID. Dx:  r INDeX laC 1 cm.\"                                                                                 \n    ,\"31 YOM SUSTAINED A CONTUSION OF A HAND BY TRIPPING ON CAT & FALLING ON STAIRS.\"                                                                 \n    ,\"ACCIDENTALLY CUT FINGER WHILE OPENING A CAT FOOD CAN, +BLEEDING >>LAC\"                                                                          \n    ,\"4 Yom was cut on cat food can. Dx:  r index lac 1 cm.\"                                                                                          \n    ,\"4 YO F, C/O FOREIGN BODY IN NOSE 1/2 HOUR, PT NOT REPORTING NATURE OF F B, PIECE OF CAT LITTER REMOVED FROM RT NOSTRIL, DX FB NOSE\"             \n    ,\"21Yowf  pT STAteS 4-5 DaYs Ago LifTEd 2 - 50 lB BagS OF CAT lItter.  al So sORTIng ClOThES & W/ seVERe paIn.  DX .  sTrain  LUMbOSaCRal.\"       \n    ,\"67 YO F WENT TO WALK DOG, IT STARTED TO CHASE CAT JERKED LEASH PULLED H ER OFF PATIO, FELL HURT ANKLES. DX BILATERAL ANKLE FRACTURES\"           \n    ,\"17Yof Cut Right Hand On A Cat Food Can - Laceration \"                                                                                           \n    ,\"46yof taking dog outside, dog bent her fingers back on a door. dog jerk ed when saw cat. hand holding leash caught on door jamb/ct hand\"        \n    ,\"19 YOF-FelL whIle WALKINg DOWn THE sTAIrS & TRiPpEd over a caT-fell oNT o \\\"TaIlBoNe\\\"         dx   coNtusIon LUMBaR, uti      *\"               \n    ,\"50YOF CUT FINGER ON CAT FOOD CAN LID.  DX: LT RING FINGER LAC \"                                                                                 \n    ,\"lEFT KNEE cOntusioN.78YOf triPPEd OVEr CaT aND fell and hIt knEE ON the fLoOr.\"                                                                 \n    ,\"LaC FInGer oN a meTAL Cat fOOd CaN \"                                                                                                            \n    ,\"PUSHING HER UTD WITH SHOTS DOG AWAY FROM THE CAT'S BOWL&BITTEN TO FINGE R>>PW/DOG BITE\"                                                         \n    ,\"DX CALF STRAIN R CALF: 15YOF R CALF PN AFTER FALL ON CARPETED STEPS, TR YING TO STEP OVER CAT, TRIPPED ON STAIRS, HIT LEG\"                      \n    ,\"DISLOCATION TOE - 80 YO FEMALE REPORTS SHE FELL AT HOME - TRIPPED OVER THE CAT LITTER BOX & FELL STRIKING TOE ON DOOR JAMB - ALSO SHOULDER INJ\" \n    ,\"73YOF-RADIUS FX-TRIPPED OVER CAT LITTER BOX-FELL-@ HOME \"                                                                                       \n    ,\"57Yom-Back Pain-Tripped Over A Cat-Fell Down 4 Steps-@ Home \"                                                                                   \n    ,\"76YOF SUSTAINED A HAND ABRASION CLEANING OUT CAT LITTER BOX THREE DAYS AGO AND NOW THE ABRASION IS INFECTED CELLULITIS HAND\"                    \n    ,\"DX R SH PN: 27YOF W/ R SH PN X 5D. STATES WAS YANK' BY HER DOG ON LEASH W DOG RAN AFTER CAT; WORSE' PN SINCE. FULL ROM BUT VERY PAINFUL TO MOVE\"\n    ,\"35Yof FeLt POp iN aBdoMeN whIlE piCKInG UP 40Lb BaG OF CAt litTeR aBdomINAL sTrain\"                                                             \n    ,\"77 Y/o f tripped over cat-c/o shoulder and upper arm pain. Fell to floo r at home. Dx proximal humerus fx\"                                      \n    ,\"FOREHEAD LAC.46YOM TRIPPED OVER CAT AND FELL INTO A DOOR FRAME. \"                                                                               \n    ,\"39Yof dog pulled her down the stairs while chasing a cat dx: rt ankle inj\"                                                                      \n    ,\"10 YO FEMALE OPENING A CAN OF CAT FOOD.  DX HAND LACERATION \"                                                                                   \n    ,\"44Yof Walking Dog And The Dof Took Off After A Cat And Pulled Pt Down B Y The Leash Strained Neck\"                                              \n    ,\"46Yof has low back pain after lifting heavy bag of cat litter lumbar spine sprain\"                                                              \n    ,\"62 yOf FELL PUShIng carT W/CAT liTtER 3 DAYs Ago. Dx:  l FIfTH rib conT.\"                                                                       \n    ,\"PT OPENING HER REFRIGERATOR AND TRIPPED OVER A CAT AND FELL ONTO SHOULD ER FRACTURED HUMERUS\"                                                   \n    ,\"Pt Lifted Bag Of Cat Food. Dx:  Low Back Px, Hx Arthritic Spine.\"\n  )\n  \n  # catcidents has been pre-defined\n  head(catcidents)\n  \n  # Construct pattern of DOG in boundaries\n  whole_dog_pattern <- whole_word(\"DOG\")\n  \n  # View matches to word \"DOG\"\n  str_view(catcidents, whole_dog_pattern, match = TRUE)\n  \n  # Transform catcidents to upper case\n  catcidents_upper <- str_to_upper(catcidents)\n  \n  # View matches to word \"DOG\" again\n  str_view(catcidents_upper, whole_dog_pattern, match = TRUE)\n  \n  # Which strings match?\n  has_dog <- str_detect(catcidents_upper, whole_dog_pattern)\n  \n  # Pull out matching strings in original \n  catcidents[has_dog]\n  \n  \n  \n  \n  # Ignoring case when matching ----\n  # View matches to \"TRIP\"\n  str_view(catcidents, \"TRIP\", match = TRUE)\n  \n  # Construct case insensitive pattern\n  trip_pattern <- regex(\"TRIP\", ignore_case = TRUE)\n  \n  # View case insensitive matches to \"TRIP\"\n  str_view(catcidents, trip_pattern, match = TRUE)\n  \n  # Get subset of matches\n  trip <- str_subset(catcidents, trip_pattern)\n  \n  # Extract matches\n  str_extract(trip, trip_pattern)\n  \n  \n  \n  # Fixing case problems ----\n  library(stringi)\n  \n  # Get first five catcidents\n  cat5 <- catcidents[1:5]\n  \n  # Take a look at original\n  writeLines(cat5)\n  \n  # Transform to title case\n  writeLines(str_to_title(cat5))\n  \n  # Transform to title case with stringi\n  writeLines(stri_trans_totitle(cat5))\n  \n  # Transform to sentence case with stringi\n  writeLines(stri_trans_totitle(cat5, type = \"sentence\"))",
    "created" : 1494716984268.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1255134568",
    "id" : "63A8F8BB",
    "lastKnownWriteTime" : 1495229115,
    "last_content_update" : 1495229115420,
    "path" : "C:/Users/d91067/Desktop/datacamp/StringManipulationinRwithstringr/string_manupulation.R",
    "project_path" : "string_manupulation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}