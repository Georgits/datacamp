{
    "collab_server" : "",
    "contents" : "# Load the xts package\nlibrary(xts)\nlibrary(zoo)\n\nflights <- readRDS(\"C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/flights.RData\")\nvis <- readRDS(\"C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/vis.RData\")\nwind <- readRDS(\"C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/wind.RData\")\ngdp <- readRDS(\"C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/us_gdp.RData\")\nunemployment <- readRDS(\"C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/unemployment.RData\")\nredsox <- readRDS(\"C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/sports.RData\")\nsports <- redsox\n\ntemps_1 <- read.csv(\"C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/temps_1.csv\", header = T, \n                    sep = \";\")\ntemps_1 <- temps_1[,-1]\ntemps_1$date <- as.Date(temps_1$date)\n\n\ntemps_2 <- read.csv(\"C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/temps_2.csv\", header = T, \n                    sep = \";\")\ntemps_2 <- temps_2[,-1]\ntemps_2$date <- as.Date(temps_2$date)\n\n\n# Chapter 1; Flight Data ----\n\n# Flight data ----\n#View the structure of the flights data\nstr(flights)\n\n#Examine the first five rows of the flights data\nhead(flights, n = 5)\n\n#Identify class of the column containing date information\nclass(flights$date)\n\n\n\n\n# Encoding your flight data ----\n\n# Convert date column to a time-based class\nflights$date <- as.Date(flights$date)\n\n# Convert flights to an xts object using as.xts\nflights_xts <- as.xts(flights[ , -5], order.by = flights$date)\n\n# Check the class of flights_xts\nclass(flights_xts)\n\n# Examine the first five lines of flights_xts\nhead(flights_xts, n = 5)\n\n\n\n# Exploring your flight data ----\n# Identify the periodicity of flights_xts\nperiodicity(flights_xts)\n\n# Identify the number of periods in flights_xts\nnmonths(flights_xts)\n\n# Find data on flights arriving in BOS in June 2014\nflights_xts[\"2014-06-01\"]\n\n\n\n# Visualize flight data ----\nlabels <- c( \"Total\", \"Delay\", \"Cancel\", \"Divert\")\nlty <- 1:4\n\n# Use plot.xts() to view total monthly flights into BOS over time\nplot.xts(flights_xts$total_flights)\n\n# Use plot.xts() to view monthly delayed flights into BOS over time\nplot.xts(flights_xts$delay_flights)\n\n# Use plot.zoo() to view all four columns of data in their own panels\nplot.zoo(flights_xts, plot.type = \"multiple\", ylab = labels)\n\n# Use plot.zoo() to view all four columns of data in one panel\nplot.zoo(flights_xts, plot.type = \"single\", lty = lty)\nlegend(\"right\", lty = lty, legend = labels)\n\n\n\n# Calculate time series trends ----\n# Calculate percentage of flights delayed each month: pct_delay\nflights_xts$pct_delay <- (flights_xts$delay_flights / flights_xts$total_flights) * 100\n\n# Use plot.xts() to view pct_delay over time\nplot.xts(flights_xts$pct_delay)\n\n# Calculate percentage of flights cancelled each month: pct_cancel\nflights_xts$pct_cancel <- (flights_xts$cancel_flights / flights_xts$total_flights) * 100\n\n# Calculate percentage of flights diverted each month: pct_divert\nflights_xts$pct_divert <- (flights_xts$divert_flights / flights_xts$total_flights) * 100\n\n# Use plot.zoo() to view all three trends over time\nplot.zoo(x = flights_xts[ , c(\"pct_delay\", \"pct_cancel\", \"pct_divert\")])\n\n\n\n\n# Saving time - I ----\n# Save your xts object to rds file using saveRDS\nsaveRDS(object = flights_xts, file = \"flights_xts.rds\")\n\n# Read your flights_xts data from the rds file\nflights_xts2 <- readRDS(\"flights_xts.rds\")\n\n# Check the class of your new flights_xts2 object\nclass(flights_xts2)\n\n# Examine the first five rows of your new flights_xts2 object\nhead(flights_xts2, n = 5)\n\n\n\n# Saving time - II ----\n# Export your xts object to a csv file using write.zoo\nwrite.zoo(flights_xts, file = \"flights_xts.csv\", sep = \",\")\n\n# Open your saved object using read.zoo\nflights2 <- read.zoo(\"flights_xts.csv\", sep = \",\", FUN = as.Date, header = TRUE, index.column = 1)\n\n# Encode your new object back into xts\nflights_xts2 <- as.xts(flights2)\n\n# Examine the first five rows of your new flights_xts2 object\nhead(flights_xts2, n = 5)\n\n\n\n\n\n\n# Chapter 2: Weather Data ----\n# Exploring temperature data ----\n# View the structure of each object\nstr(temps_1)\nstr(temps_2)\n\n# View the first and last rows of temps_1\nhead(temps_1)\ntail(temps_1)\n\n# View the first and last rows of temps_2\nhead(temps_2)\ntail(temps_2)\n\n\n\n\n\n# Merging using rbind() -----\n# Confirm that the date column in each object is a time-based class\nclass(temps_1)\nclass(temps_2)\n\n# Encode your two temperature data frames as xts objects\ntemps_1_xts <- as.xts(temps_1[, -4], order.by = temps_1$date)\ntemps_2_xts <- as.xts(temps_2[, -4], order.by = temps_2$date)\n\n# View the first few lines of each new xts object to confirm they are properly formatted\nhead(temps_1_xts)\nhead(temps_2_xts)\n\n# Use rbind to merge your new xts objects\ntemps_xts <- rbind(temps_1_xts, temps_2_xts)\n\n# View data for the first 3 days of the last month of the first year in temps_xts\nfirst(last(first(temps_xts, \"1 year\"), \"1 month\"), \"3 days\")\n\n\n\n\n# Visualizing Boston winters ----\n# Identify the periodicity of temps_xts\nperiodicity(temps_xts)\n\n# Generate a plot of mean Boston temperature for the duration of your data\nplot.xts(temps_xts$mean)\n\n# Generate a plot of mean Boston temperature from November 2010 through April 2011\nplot.xts(temps_xts$mean[\"2010-11-01/2011-04-30\"])\n\n# Use plot.zoo to generate a single plot showing mean, max, and min temperatures during the same period\nlty <- c(3,1,3)\nplot.zoo(temps_xts[\"2010-11-01/2011-04-30\"], plot.type = \"single\", lty = lty)\n\n\n\n\n# Subsetting and adjusting periodicity ----\n# Subset your temperature data to include only 2010 through 2015: temps_xts_2\ntemps_xts_2 <- temps_xts[\"2010/2015\"]\n\n# Use to.period to convert temps_xts_2 to monthly periodicity\ntemps_monthly <- to.period(temps_xts_2, period = \"months\", OHLC = FALSE, indexAt = \"firstof\")\n\n# Compare the periodicity and duration of temps_monthly and flights_xts \nperiodicity(temps_monthly)\nperiodicity(flights_xts)\n\n\n\n\n# !!!Generating a monthly average ----\n# Split temps_xts_2 into separate lists per month\nmonthly_split <- split(temps_xts_2$mean, f = \"months\")\n\n# Use lapply to generate the monthly mean of mean temperatures\nmean_of_means <- lapply(monthly_split, FUN = \"mean\")\n\n# Use as.xts to generate an xts object of average monthly temperature data\ntemps_monthly <- as.xts(as.numeric(mean_of_means), order.by = seq(as.Date(\"2010-01-01\"), length = 72, by = \"months\"))\n\n# Compare the periodicity and duration of your new temps_monthly and flights_xts \nperiodicity(temps_monthly)\nperiodicity(flights_xts)\n\n\n\n\n# Using merge() and plotting over time ----\nlty <- c(1,2)\nlabels <- c(\"Pct. Delay\",  \"Temperature\")\n# Use merge to combine your flights and temperature objects\nflights_temps <- merge(flights_xts, temps_monthly)\n\n# Examine the first few rows of your combined xts object\nhead(flights_temps)\n\n# Use plot.zoo to plot these two columns in a single panel\nplot.zoo(flights_temps[,c(\"pct_delay\", \"temps_monthly\")], plot.type = \"single\", lty = lty)\nlegend(\"topright\", lty = lty, legend = labels, bg = \"white\")\n\n\n\n\n# Expanding your data ----\n# Confirm the periodicity and duration of the vis and wind data\nperiodicity(vis)\nperiodicity(wind)\n\n# Merge vis and wind with your existing flights_temps data\nflights_weather <- merge(flights_temps, vis, wind)\n\n# View the first few rows of your flights_weather data\nhead(flights_weather, n = 2)\n\nlty <- c(1,2,3)\nlabels <- c(\"Pct. Delay\",  \"Wind\", \"Visibility\")\nplot.zoo(flights_weather[,c(\"pct_delay\", \"wind\", \"vis\")], plot.type = \"multiple\", lty = lty)\n\n\n\n\n# Chapter 3: Economic Data ----\n# Exploring economic data ----\n# Get a summary of your GDP data\nsummary(gdp)\n\n# Convert GDP date column to time object\ngdp$date <- as.yearqtr(gdp$date)\n\n# Convert GDP data to xts\ngdp_xts <- as.xts(gdp[, -1], order.by = gdp$date)\n\n# Plot GDP data over time\nplot.xts(gdp_xts)\n\n\n\n# Replace missing data - I ----\n# Fill NAs in gdp_xts with the last observation carried forward\ngdp_locf <- na.locf(gdp_xts)\n\n# Fill NAs in gdp_xts with the next observation carried backward \ngdp_nocb <- na.locf(gdp_xts, fromLast = TRUE)\n\n# Produce a plot for each of your new xts objects\npar(mfrow = c(2,1))\nplot.xts(gdp_locf, major.format = \"%Y\")\nplot.xts(gdp_nocb, major.format = \"%Y\")\n\n# Query for GDP in 1993 in both gdp_locf and gdp_nocb\ngdp_locf[\"1993\"]\ngdp_nocb[\"1993\"]\n\n\n\n# Replace missing data - II ----\n# Fill NAs in gdp_xts using linear approximation\ngdp_approx <- na.approx(gdp_xts)\n\n# Plot your new xts object\nplot.xts(gdp_approx, major.format = \"%Y\")\n\n# Query for GDP in 1993 in gdp_approx\ngdp_approx[\"1993\"]\n\n\n\n# Exploring unemployment data ----\n# View a summary of your unemployment data\nsummary(unemployment)\n\n# Use na.approx to remove missing values in unemployment data\nunemployment <- na.approx(unemployment)\n\n# Plot new unemployment data\nlty <- 1:2\nlabels = c( \"US Unemployment (%)\", \"MA Unemployment (%)\")\nplot.zoo(unemployment, plot.type = \"single\", lty = lty)\nlegend(\"topright\", lty = lty, legend = labels, bg = \"white\")\n\n\n\n\n# !!! (lag in zoo and xts) Lagging unemployment ----\n# Be careful to keep your formatting consistent. Base R and the zoo package require that you specify a lag with a negative value, \n# so that a lag of 1 is expressed using \"-1\" (and a lead of 1 is counterintuitively expressed using \"1\"). # \n# By contrast, the xts package specifies lags using a positive value, so that a lag of 1 is expressed using \"1\" \n# (and a lead of 1 is expressed using \"-1\").\n# Create a one month lag of US unemployment\nus_monthlag <- lag(unemployment$us, k = 1)\n\n# Create a one year lag of US unemployment\nus_yearlag <- lag(unemployment$us, k = 12)\n\n# Merge your original data with your new lags \nunemployment_lags <- merge(unemployment, us_monthlag, us_yearlag)\n\n# View the first 15 rows of unemployment_lags\nhead(unemployment_lags, n = 15)\n\n\n\n# Differencing unemployment ---\n# Generate monthly difference in unemployment\nunemployment$us_monthlydiff <- diff(unemployment$us, lag = 1, differences = 1)\n\n# Generate yearly difference in unemployment\nunemployment$us_yearlydiff <- diff(unemployment$us, lag = 12, differences = 1)\n\n# Plot US unemployment and annual difference\npar(mfrow = c(2,1))\nplot.xts(unemployment$us)\nplot.xts(unemployment$us_yearlydiff, type = \"h\")\n\n\n\n\n# !!! (Split-apply-bind) Add a discrete rolling sum to GDP data ----\n# Add a quarterly difference in gdp\ngdp$quarterly_diff <- diff(gdp$gdp, lag = 1, differences = 1)\n\n# Split gdp$quarterly_diff into years\ngdpchange_years <- split(gdp$quarterly_diff, f = \"years\")\n\n# Use lapply to calculate the cumsum each year\ngdpchange_ytd <- lapply(gdpchange_years, FUN = cumsum)\n\n# Use do.call to rbind the results\ngdpchange_xts <- do.call(rbind, gdpchange_ytd)\n\n# Plot cumulative year-to-date change in GDP\nplot.xts(gdpchange_xts, type = \"h\")\n\n\n\n\n# Add a continuous rolling average to unemployment data ----\n# Use rollapply to calculate the rolling yearly average US unemployment\nunemployment$year_avg <- rollapply(unemployment$us, width = 12, FUN = mean)\n\n# Plot all columns of US unemployment data\nlty <- 2:1\nlwd <- 1:2\nplot.zoo(unemployment[, c(\"us\", \"year_avg\")], plot.type = \"single\", lty = lty, lwd = lwd)\n\n\n\n\n\n# Manipulating MA unemployment data ----\n# Add a one-year lag of MA unemployment\nunemployment$ma_yearlag <- lag(unemployment$ma, k = 12)\n\n# Add a six-month difference of MA unemployment\nunemployment$ma_sixmonthdiff <- diff(unemployment$ma, lag = 6, difference = 1)\n\n# Add a six-month rolling average of MA unemployment\nunemployment$ma_sixmonthavg <- rollapply(unemployment$ma, width = 6, FUN = mean)\n\n# Add a yearly rolling maximum of MA unemployment\nunemployment$ma_yearmax <- rollapply(unemployment$ma, width = 12, FUN = max)\n\n# View the last year of unemployment data\ntail(unemployment, n = 12)\n\n\n\n\n\n\n# 4. Chapter: Sports ----\n# Encoding and plotting Red Sox data ----\n# # View summary information about your redsox data\n# summary(redsox)\n# \n# # Convert the date column to a time-based format\n# redsox$date<- as.Date(redsox$date)\n# \n# # Convert your red sox data to xts\n# redsox_xts <- as.xts(redsox[,-1], order.by = redsox$date)\n\n# Plot the Red Sox score and the opponent score over time\nredsox_xts <-  redsox\nplot.zoo(redsox_xts[, c(\"boston_score\", \"opponent_score\")])\n\n\n\n\n# Calculate a closing average ----\n# Generate a new variable coding for red sox wins\nredsox_xts$win_loss <- ifelse(redsox_xts$boston_score > redsox_xts$opponent_score, 1, 0)\n\n# Identify the date of the last game each season\nclose <- endpoints(redsox_xts, on = \"years\")\n\n# Calculate average win/loss record at the end of each season\nperiod.apply(redsox_xts[, \"win_loss\"], INDEX = close, FUN = mean)\n\n\n\n\n# Calculate and plot a seasonal average ----\ncummean <- function(x) {\n  cumsum(x) / seq_along(x)\n}\n# Split redsox_xts win_loss data into years \nredsox_seasons <- split(redsox_xts$win_loss, f = \"years\")\n\n# Use lapply to calculate the cumulative mean for each season\nredsox_ytd <- lapply(redsox_seasons, cummean)\n\n# Use do.call to rbind the results\nredsox_winloss <- do.call(rbind, redsox_ytd)\n\n# Plot the win_loss average for the 2013 season\nplot.xts(redsox_winloss[\"2013\"], ylim = c(0, 1))\n\n\n\n\n\n# Calculate and plot a rolling average ----\n# Select only the 2013 season\nredsox_2013 <- redsox_xts[\"2013\"]\n\n# Use rollapply to generate the last ten average\nlastten_2013 <- rollapply(redsox_2013$win_loss, width = 10, FUN = mean)\n\n# Plot the last ten average during the 2013 season\nplot.xts(lastten_2013, ylim = c(0, 1))\n\n\n\n\n\n# Extract weekend games ----\n# Extract the day of the week of each observation\nweekday <- .indexwday(sports)\nhead(weekday)\n\n# Generate an index of weekend dates\nweekend <- which(.indexwday(sports) == 0 | .indexwday(sports) == 6)\n\n# Subset only weekend games\nweekend_games <- sports[weekend]\nhead(weekend_games)\n\n\n\n\n# Calculate a rolling average across all sports ----\n# Generate a subset of sports data with only homegames\nhomegames <- sports[sports$homegame == 1]\n\n# Calculate the win/loss average of the last 20 home games\nhomegames$win_loss_20 <- rollapply(homegames$win_loss, width = 20, FUN = mean)\n\n# Calculate the win/loss average of the last 100 home games\nhomegames$win_loss_100 <- rollapply(homegames$win_loss, width = 100, FUN = mean)\n\n# Use plot.xts to generate\nlty <- c(3,1)\nlwd <- 1:2\nplot.zoo(homegames[, c(\"win_loss_20\", \"win_loss_100\")], plot.type = \"single\", lty = lty, lwd = lwd)\n",
    "created" : 1501418678305.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2048395129",
    "id" : "B31BD8A4",
    "lastKnownWriteTime" : 1501618361,
    "last_content_update" : 1501618361898,
    "path" : "C:/Users/d91067/Desktop/datacamp/Manipulating_Time_Series_Data_in_R_Case_Studies/Manipulating_Time_Series_Data_in_R_Case_Studies.R",
    "project_path" : "Manipulating_Time_Series_Data_in_R_Case_Studies.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}