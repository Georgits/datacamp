library(shiny); runApp('02_simple_app.R')
runApp('01_base_app.R')
runApp('02_simple_app.R')
install.packages("gapminder")
runApp('05_small_gapminder_app.R')
# Load the ggplot2 package for plotting
library(ggplot2)
# Define UI for the application
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
# Add a title text input
textInput("title", label = "Title", value = "GDP vs life exp")
),
mainPanel(
plotOutput("plot")
)
)
)
# Define the server logic
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
scale_x_log10() +
# Use the input value as the plot's title
ggtitle(input$title)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny); runApp('06_gapminder_plot_title.R')
runApp('06_gapminder_plot_title.R')
runApp('06_gapminder_plot_title.R')
runApp('06_gapminder_plot_title.R')
runApp('06_gapminder_plot_title.R')
runApp('06_gapminder_plot_title.R')
runApp('06_gapminder_plot_title.R')
runApp('07_gapminder_plot_2.R')
install.packages("colourpicker")
runApp('07_gapminder_plot_2.R')
runApp('07_gapminder_plot_2.R')
runApp('07_gapminder_plot_2.R')
devtools::install_github('hadley/ggplot2')
install.packages("devtools")
devtools::install_github('hadley/ggplot2')
runApp('07_gapminder_plot_2.R')
library(shiny); runApp('07_gapminder_plot_2.R')
# Load the ggplot2 package for plotting
library(shiny)
library(shinydashboard)
ui <- fluidPage(
h1("Gapminder"),
# Add a placeholder for a table output
tableOutput("table")
)
server <- function(input, output) {
# Call the appropriate render function
output$table <- renderTable({
# Show the gapminder object in the table
gapminder
})
}
shinyApp(ui, server)
# Load the ggplot2 package for plotting
library(shiny)
library(shinydashboard)
library(gapminder)
library(ggplot2)
# Load the colourpicker package
library(colourpicker)
# Load the plotly package
library(plotly)
ui <- fluidPage(
h1("Gapminder"),
# Add a placeholder for a table output
tableOutput("table")
)
server <- function(input, output) {
# Call the appropriate render function
output$table <- renderTable({
# Show the gapminder object in the table
gapminder
})
}
shinyApp(ui, server)
runApp('08_gapminder_explore.R')
runApp('08_gapminder_explore.R')
runApp('08_gapminder_explore.R')
# Load the ggplot2 package for plotting
library(shiny)
library(shinydashboard)
library(gapminder)
library(ggplot2)
# Load the colourpicker package
library(colourpicker)
# Load the plotly package
library(plotly)
ui <- fluidPage(
h1("Gapminder"),
sliderInput(inputId = "life", label = "Life expectancy",
min = 0, max = 120,
value = c(30, 50)),
selectInput("continent", "Continent",
choices = c("All", levels(gapminder$continent))),
# Add a download button
downloadButton(outputId = "download_data", label = "Download"),
plotOutput("plot"),
tableOutput("table")
)
server <- function(input, output) {
output$table <- renderTable({
data <- gapminder
data <- subset(
data,
lifeExp >= input$life[1] & lifeExp <= input$life[2]
)
if (input$continent != "All") {
data <- subset(
data,
continent == input$continent
)
}
data
})
# Create a download handler
output$download_data <- downloadHandler(
# The downloaded file is named "gapminder_data.csv"
filename = "gapminder_data.csv",
content = function(file) {
# The code for filtering the data is copied from the
# renderTable() function
data <- gapminder
data <- subset(
data,
lifeExp >= input$life[1] & lifeExp <= input$life[2]
)
if (input$continent != "All") {
data <- subset(
data,
continent == input$continent
)
}
# Write the filtered data into a CSV file
write.csv(data, file, row.names = FALSE)
}
)
output$plot <- renderPlot({
data <- gapminder
data <- subset(
data,
lifeExp >= input$life[1] & lifeExp <= input$life[2]
)
if (input$continent != "All") {
data <- subset(
data,
continent == input$continent
)
}
ggplot(data, aes(gdpPercap, lifeExp)) +
geom_point() +
scale_x_log10()
})
}
shinyApp(ui, server)
runApp('08_gapminder_explore.R')
runApp('08_gapminder_explore.R')
runApp('08_gapminder_explore.R')
library(shiny); runApp('08_gapminder_explore.R')
?write.csv
runApp('09_gapminder_explore_plus_DT_CSS.R')
install.packages("DT")
runApp('09_gapminder_explore_plus_DT_CSS.R')
runApp('09_gapminder_explore_plus_DT_CSS.R')
runApp('08_gapminder_explore.R')
library(shiny); runApp('09_gapminder_explore_plus_DT_tabs_CSS.R')
runApp('08_gapminder_explore.R')
runApp('09_gapminder_explore_plus_DT_tabs_CSS.R')
runApp('08_gapminder_explore.R')
runApp('07_gapminder_plotly.R')
install.packages("wordcloud2")
df <- read.table("gg.txt", header = FALSE)
library(wordcloud2)
str8demoFreq
str(demoFreq)
View(demoFreq)
install.packages("readr")
library(readr)
mystring <- read_file("gg.txt")
mystring
str(mystring)
singleString <- paste(readLines("gg.txt"), collapse=" ")
singleString
str(sin)
str(singleString)
# Define UI for the application
ui <- fluidPage(
h1("Word Cloud"),
# Add the word cloud output placeholder to the UI
wordcloud2Output(outputId = "cloud")
)
# Define the server logic
server <- function(input, output) {
# Render the word cloud and assign it to the output list
output$cloud <- renderWordcloud2({
# Create a word cloud object
create_wordcloud(singleString)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny); runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
# Load the ggplot2 package for plotting
library(shiny)
library(shinydashboard)
library(gapminder)
library(ggplot2)
library(DT)
library(wordcloud2)
install.packages("tm")
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
runApp('11_wordcloud.R')
runApp('11_wordcloud.R')
runApp('11_wordcloud.R')
runApp('11_wordcloud.R')
runApp('11_wordcloud_textAreInput.R')
runApp('11_wordcloud_textAreInput.R')
runApp('11_wordcloud_textAreInput.R')
runApp('10_wordcloud.R')
runApp('10_wordcloud.R')
install.packages("igraph")
install.packages("igraph")
library(igraph)
?R.home
R.home(component = "home")
a<-R.home(component = "home")
a
C:/Users/D91067/AppData/Local/conda/conda/envs/rstudio/lib
R.home(component = "home")
install.packages("igraph")
