{
    "collab_server" : "",
    "contents" : "descriptions <- readRDS(\"descriptions.rds\")\nvotes <- readRDS(\"votes.rds\")\n\n\n# Chapter 1: Data cleaning and summarizing with dplyr ----\n# 1.1. Filtering rows ----\n    # Load the dplyr package\n    library(dplyr)\n    \n    # Print the votes dataset\n    print(votes)\n    \n    # Filter for votes that are \"yes\", \"abstain\", or \"no\"\n    votes %>%\n      filter(vote <= 3)\n    \n# 1.2. Adding a year column ----\n    # Add another %>% step to add a year column\n    votes %>%\n      filter(vote <= 3) %>%\n      mutate(year = session + 1945)\n    \n# 1.3. Adding a country column ----\n    # Load the countrycode package\n    library(countrycode)\n    \n    # Convert country code 100\n    countrycode(100, \"cown\", \"country.name\")\n    \n    # Add a country column within the mutate: votes_processed\n    votes_processed <- votes %>%\n      filter(vote <= 3) %>%\n      mutate(year = session + 1945, country = countrycode(ccode, \"cown\", \"country.name\"))\n    \n# 1.4. Summarizing the full dataset ----\n    # Print votes_processed\n    print(votes_processed)\n    \n    # Find total and fraction of \"yes\" votes\n    votes_processed %>%\n      summarize(total = n(),\n                percent_yes = mean(vote == 1))\n    \n# 1.5. Summarizing by year ----\n    # Change this code to summarize by year\n    votes_processed %>%\n      group_by(year) %>%\n      summarize(total = n(),\n                percent_yes = mean(vote == 1))\n    \n# 1.6. Summarizing by country ----\n    # Summarize by country: by_country\n    by_country <- votes_processed %>%\n      group_by(country) %>%\n      summarize(total = n(),\n                percent_yes = mean(vote == 1))\n    \n# 1.7. Sorting by percentage of \"yes\" votes ----\n    # You have the votes summarized by country\n    by_country <- votes_processed %>%\n      group_by(country) %>%\n      summarize(total = n(),\n                percent_yes = mean(vote == 1))\n    \n    # Print the by_country dataset\n    print(by_country)\n    \n    # Sort in ascending order of percent_yes\n    by_country %>%\n      arrange(percent_yes)\n    \n    # Now sort in descending order\n    by_country %>%\n      arrange(desc(percent_yes))\n    \n# 1.8. Filtering summarized output ----\n    # Filter out countries with fewer than 100 votes\n    by_country %>%\n      filter(total >= 100) %>%\n      arrange(percent_yes)\n    \n    \n# Chapter 2: Data visualization with ggplot2 ----\n# 2.1. Plotting a line over time ----\n    # Define by_year\n    by_year <- votes_processed %>%\n      group_by(year) %>%\n      summarize(total = n(),\n                percent_yes = mean(vote == 1))\n    \n    # Load the ggplot2 package\n    library(ggplot2)\n    \n    # Create line plot\n    ggplot(by_year, aes(x = year, y = percent_yes)) + \n      geom_line()\n    \n# 2.2. Other ggplot2 layers ----\n    # Change to scatter plot and add smoothing curve\n    ggplot(by_year, aes(year, percent_yes)) +\n      geom_point() + \n      geom_smooth()\n\n# 2.3. Summarizing by year and country ----\n    # Group by year and country: by_year_country\n    by_year_country <- votes_processed %>%\n      group_by(year, country) %>%\n      summarize(total = n(),\n                percent_yes = mean(vote == 1))\n    \n# 2.4. Plotting just the UK over time ----\n    # Start with by_year_country dataset\n    by_year_country <- votes_processed %>%\n      group_by(year, country) %>%\n      summarize(total = n(),\n                percent_yes = mean(vote == 1))\n    \n    # Print by_year_country\n    print(by_year_country)\n    \n    # Create a filtered version: UK_by_year\n    UK_by_year <- by_year_country %>%\n      filter(country == \"United Kingdom\")\n    \n    # Line plot of percent_yes over time for UK only\n    ggplot(UK_by_year, aes(x = year, y = percent_yes)) +\n      geom_line()\n    \n# 2.5. Plotting multiple countries ----\n    # Vector of four countries to examine\n    countries <- c(\"United States\", \"United Kingdom\",\n                   \"France\", \"India\")\n    \n    # Filter by_year_country: filtered_4_countries\n    filtered_4_countries <- by_year_country %>%\n      filter(country %in% countries)\n    \n    # Line plot of % yes in four countries\n    ggplot(filtered_4_countries, aes(x = year, y = percent_yes, color = country)) +\n      geom_line()\n    \n# 2.6. Faceting by country ----\n    # Vector of six countries to examine\n    countries <- c(\"United States\", \"United Kingdom\",\n                   \"France\", \"Japan\", \"Brazil\", \"India\")\n    \n    # Filtered by_year_country: filtered_6_countries\n    filtered_6_countries <- by_year_country %>%\n      filter(country %in% countries)\n    \n    # Line plot of % yes over time faceted by country\n    ggplot(filtered_6_countries, aes(x = year, y = percent_yes, color = country)) +\n      geom_line() + \n      facet_wrap(~ country)\n    \n# 2.7. Faceting with free y-axis ----\n    # Vector of six countries to examine\n    countries <- c(\"United States\", \"United Kingdom\",\n                   \"France\", \"Japan\", \"Brazil\", \"India\")\n    \n    # Filtered by_year_country: filtered_6_countries\n    filtered_6_countries <- by_year_country %>%\n      filter(country %in% countries)\n    \n    # Line plot of % yes over time faceted by country\n    ggplot(filtered_6_countries, aes(year, percent_yes)) +\n      geom_line() +\n      facet_wrap(~ country, scale = \"free_y\")\n    \n# 2.8. Choose your own countries ----\n    # Add three more countries to this list\n    countries <- c(\"United States\", \"United Kingdom\",\n                   \"France\", \"Japan\", \"Brazil\", \"India\", \"Germany\", \"Russian Federation\", \"Georgia\")\n    \n    # Filtered by_year_country: filtered_countries\n    filtered_countries <- by_year_country %>%\n      filter(country %in% countries)\n    \n    # Line plot of % yes over time faceted by country\n    ggplot(filtered_countries, aes(year, percent_yes)) +\n      geom_line() +\n      facet_wrap(~ country, scales = \"free_y\")\n    \n    \n# Chapter 3: Tidy modeling with broom ----\n# 3.1. Linear regression on the United States ----\n    # Percentage of yes votes from the US by year: US_by_year\n    US_by_year <- by_year_country %>%\n      filter(country == \"United States\")\n    \n    # Print the US_by_year data\n    print(US_by_year)\n    \n    # Perform a linear regression of percent_yes by year: US_fit\n    US_fit <- lm(percent_yes ~ year, data = US_by_year)\n    \n    # Perform summary() on the US_fit object\n    summary(US_fit)\n    \n# 3.2. Tidying a linear regression model ----\n    # Load the broom package\n    library(broom)\n    \n    # Call the tidy() function on the US_fit object\n    tidy(US_fit)\n    \n# 3.3. Combining models for multiple countries ----\n    # Linear regression of percent_yes by year for US\n    US_by_year <- by_year_country %>%\n      filter(country == \"United States\")\n    US_fit <- lm(percent_yes ~ year, US_by_year)\n    \n    # Fit model for the United Kingdom\n    UK_by_year <- by_year_country %>%\n      filter(country == \"United Kingdom\")\n    UK_fit <- lm(percent_yes ~ year, UK_by_year)\n    \n    # Create US_tidied and UK_tidied\n    US_tidied <- tidy(US_fit)\n    UK_tidied <- tidy(UK_fit)\n    \n    # Combine the two tidied models\n    US_tidied %>%\n      bind_rows(UK_tidied)\n    \n# 3.4. Nesting a data frame ----\n    # Load the tidyr package\n    library(tidyr)\n    \n    # Nest all columns besides country\n    by_year_country %>%\n      nest( -country)\n    \n    \n# 3.5. Nesting a data frame ----\n    # All countries are nested besides country\n    nested <- by_year_country %>%\n      nest(-country)\n    \n    # Print the nested data for Brazil\n    nested$data[[7]]\n    \n# 3.6. Unnesting ----\n    # All countries are nested besides country\n    nested <- by_year_country %>%\n      nest(-country)\n    \n    # Unnest the data column to return it to its original form\n    nested %>%\n      unnest()\n    \n# 3.6. Performing linear regression on each nested dataset ----\n    # Load tidyr and purrr\n    library(tidyr)\n    library(purrr)\n    \n    # Perform a linear regression on each item in the data column\n    by_year_country %>%\n      nest(-country) %>%\n      mutate(model = map(data, ~ lm(percent_yes ~ year, data = .)))\n    \n    \n# 3.7. Tidy each linear regression model   ----\n    # Load the broom package\n    library(broom)\n    \n    # Add another mutate that applies tidy() to each model\n    by_year_country %>%\n      nest(-country) %>%\n      mutate(model = map(data, ~ lm(percent_yes ~ year, data = .))) %>%\n      mutate(tidied = map(model, tidy))\n    \n# 3.8. Unnesting a data frame   ----\n    # Add one more step that unnests the tidied column\n    country_coefficients <- by_year_country %>%\n      nest(-country) %>%\n      mutate(model = map(data, ~ lm(percent_yes ~ year, data = .)),\n             tidied = map(model, tidy)) %>%\n      unnest(tidied)\n    \n    # Print the resulting country_coefficients variable\n    print(country_coefficients)\n    \n# 3.9. Filtering model terms   ----\n    # Print the country_coefficients dataset\n    print(country_coefficients)\n    \n    # Filter for only the slope terms\n    country_coefficients %>%\n      filter(term == \"year\")\n    \n# 3.10. Filtering for significant countries   ----\n    # Filter for only the slope terms\n    slope_terms <- country_coefficients %>%\n      filter(term == \"year\")\n    \n    # Add p.adjusted column, then filter\n    slope_terms %>%\n      mutate(p.adjusted = p.adjust(p.value))\n    \n# 3.11. Sorting by slope   ----\n    # Filter by adjusted p-values\n    filtered_countries <- country_coefficients %>%\n      filter(term == \"year\") %>%\n      mutate(p.adjusted = p.adjust(p.value)) %>%\n      filter(p.adjusted < .05)\n    \n    # Sort for the countries increasing most quickly\n    filtered_countries %>%\n      arrange(desc(estimate))\n    \n    # Sort for the countries decreasing most quickly\n    filtered_countries %>%\n      arrange(estimate)\n    \n    \n# Chapter 4: Joining and tidying ----\n# 4.1. Joining datasets with inner_join ----\n    # Load dplyr package\n    library(dplyr)\n    \n    # Print the votes_processed dataset\n    print(votes_processed)\n    \n    # Print the descriptions dataset\n    print(descriptions)\n    \n    # Join them together based on the \"rcid\" and \"session\" columns\n    votes_joined <- votes_processed %>%\n      inner_join(descriptions, by = c(\"rcid\", \"session\"))\n    \n# 4.2. Joining datasets with inner_join ----\n    # Filter for votes related to colonialism\n    votes_joined %>%\n      filter(co == 1)\n    \n# 4.3. Visualizing colonialism votes ----\n    # Load the ggplot2 package\n    library(ggplot2)\n    \n    # Filter, then summarize by year: US_co_by_year\n    US_co_by_year <- votes_joined %>%\n      filter(co == 1 & country == \"United States\") %>%\n      group_by(year) %>%\n      summarize(percent_yes = mean(vote == 1))\n    \n    # Graph the % of \"yes\" votes over time\n    ggplot(US_co_by_year, aes(x = year, y = percent_yes)) +\n      geom_line()\n    \n# 4.4. Using gather to tidy a dataset ----\n    # Load the tidyr package\n    library(tidyr)\n    \n    # Gather the six mu/nu/di/hr/co/ec columns\n    votes_joined %>%\n      gather(topic, has_topic, me:ec)\n    \n    # Perform gather again, then filter\n    votes_gathered <- votes_joined %>%\n      gather(topic, has_topic, me:ec) %>%\n      filter(has_topic == 1)\n    \n# 4.5. Using gather to tidy a dataset ----\n    # Replace the two-letter codes in topic: votes_tidied\n    votes_tidied <- votes_gathered %>%\n      mutate(topic = recode(topic,\n                            me = \"Palestinian conflict\",\n                            nu = \"Nuclear weapons and nuclear material\",\n                            di = \"Arms control and disarmament\",\n                            hr = \"Human rights\",\n                            co = \"Colonialism\",\n                            ec = \"Economic development\"))\n    \n# 4.6. Summarize by country, year, and topic ----\n    # Print votes_tidied\n    print(votes_tidied)\n    \n    # Summarize the percentage \"yes\" per country-year-topic\n    by_country_year_topic <- votes_tidied %>%\n      group_by(country, year, topic) %>%\n      summarize(total = n(), percent_yes = mean(vote == 1)) %>% \n      ungroup()\n    \n    # Print by_country_year_topic\n    print(by_country_year_topic)\n    \n# 4.7. Visualizing trends in topics for one country ----\n    # Load the ggplot2 package\n    library(ggplot2)\n    \n    # Filter by_country_year_topic for just the US\n    US_by_country_year_topic <- by_country_year_topic %>%\n      filter(country == \"United States\")\n    \n    # Plot % yes over time for the US, faceting by topic\n    ggplot(US_by_country_year_topic, aes(x = year, y = percent_yes)) +\n      geom_line() +\n      facet_wrap(~topic)\n    \n    \n# 4.8. Nesting by topic and country ----\n    # Load purrr, tidyr, and broom\n    library(purrr)\n    library(tidyr)\n    library(broom)\n    \n    # Print by_country_year_topic\n    print(by_country_year_topic)\n    \n    # Fit model on the by_country_year_topic dataset\n    country_topic_coefficients <- by_country_year_topic %>%\n      nest(-country, -topic) %>%\n      mutate(model = map(data, ~ lm(percent_yes ~ year, data = .)),\n             tidied = map(model, tidy)) %>%\n      unnest(tidied)\n    \n    # Print country_topic_coefficients\n    print(country_topic_coefficients)\n\n        \n# 4.9. Interpreting tidy models ----\n    # Create country_topic_filtered\n    country_topic_filtered <- country_topic_coefficients %>%\n      filter(term == \"year\") %>%\n      mutate(p.adjusted = p.adjust(p.value)) %>%\n      filter(p.adjusted < .05)\n    \n# 4.10. Checking models visually ----\n    # Create vanuatu_by_country_year_topic\n    vanuatu_by_country_year_topic <- by_country_year_topic %>%\n      filter(country == \"Vanuatu\")\n    \n    # Plot of percentage \"yes\" over time, faceted by topic\n    ggplot(vanuatu_by_country_year_topic, aes(x = year, y = percent_yes)) + \n      geom_line() + \n      facet_wrap(~topic)",
    "created" : 1492460144932.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2601136375",
    "id" : "95BA66A9",
    "lastKnownWriteTime" : 1506690989,
    "last_content_update" : 1506690989524,
    "path" : "C:/Users/d91067/Desktop/datacamp/01_R/Exploratory Data Analysis in R Case Study/Exercises.R",
    "project_path" : "Exercises.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}