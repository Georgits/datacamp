{
    "collab_server" : "",
    "contents" : "# 1. Chapter 1: Apply  -----\n# 1.1. Plotting financial data ----\n    # Get SPY from Yahoo Finance (\"yahoo\")\n    getSymbols(\"SPY\", from = \"2000-01-01\", to = \"2016-06-30\", src =  \"yahoo\", adjust =  TRUE)\n    \n    # Plot the closing price of SPY\n    plot(Cl(SPY))\n\n    \n# 1.2. Adding a moving average to financial data ----\n    # Plot the closing prices of SPY\n    plot(Cl(SPY))\n    \n    # Add a 200-day moving average using the lines command\n    lines(SMA(Cl(SPY), n = 200), col = \"red\")\n    \n    \n# 2. Chapter 2: A boilerplate for quantstrat strategies   -----\n# 2.1. Understanding initialization settings - I ----\n    # Load the quantstrat-package\n    library(quantstrat)\n    \n    # Create initdate, from, and to charater strings\n    initdate <- \"1999-01-01\"\n    from <- \"2003-01-01\"\n    to <- \"2015-12-31\"\n    \n    # Set the timezone to UTC\n    Sys.setenv(TZ = \"UTC\")\n    \n    # Set the currency to USD \n    currency(\"USD\")\n    \n    \n# 2.2. Understanding initialization settings - II ----\n    # Load the quantmod-package\n    library(quantmod)\n    \n    # Retrieve SPY from yahoo\n    getSymbols(\"SPY\", from = \"2003-01-01\", to = \"2015-12-31\", src = \"yahoo\", adjust = TRUE)\n    \n    # Use the stock command to initialize SPY and set currency to USD\n    stock(\"SPY\", currency = \"USD\")\n    \n    \n# 2.3. Understanding initialization settings - III ----\n    # Define your trade size and initial equity\n    tradesize <- 100000\n    initeq <- 100000\n    \n    # Define the names of your strategy, portfolio and account\n    strategy.st <- \"firststrat\"\n    portfolio.st <- \"firststrat\"\n    account.st <- \"firststrat\"\n    \n    # Remove the existing strategy if it exists\n    rm.strat(strategy.st)\n    \n# 2.4. Understanding initialization settings - III ----\n    # initialize the portfolio\n    initPortf(portfolio.st, symbols = \"SPY\", initDate = initdate, currency = \"USD\")\n    \n    # initialize the account\n    initAcct(account.st, portfolios = portfolio.st, initDate = initdate, currency = \"USD\", initEq = initeq)\n    \n    # initialize the orders\n    initOrders(portfolio.st, initDate = initdate)\n    \n    # store the strategy\n    strategy(strategy.st, store = TRUE)\n    \n    \n# 3. Chapter 3: Indicators   -----\n# 3.1. The SMA and RSI functions ----\n    # Create a 200-day moving average\n    spy_sma <- SMA(x = Cl(SPY), n = 200)\n    \n    # Create an RSI with a 3 day lookback period\n    spy_rsi <- RSI(price = Cl(SPY), n = 3)\n    \n# 3.2. The SMA and RSI functions ----\n    # Plot the closing prices of SPY\n    plot(Cl(SPY))\n    \n    # Overlay a 200-day SMA\n    lines(SMA(Cl(SPY), n = 200), col = \"red\")\n    \n    # Is this a trend or reversion indicator?\n    \"trend\"\n    \n# 3.3. The SMA and RSI functions ----\n    # plot the closing price of SPY\n    plot(Cl(SPY))\n    \n    # plot the RSI 2\n    plot(RSI(Cl(SPY), n = 2))\n    \n    # trend or reversion?\n    \"reversion\"\n    \n# 3.4. The SMA and RSI functions ----\n    # Add a 200-day simple moving average indicator to your strategy\n    add.indicator(strategy = strategy.st, \n                  \n                  # Add the SMA function\n                  name = \"SMA\", \n                  \n                  # Create a lookback period\n                  arguments = list(x = quote(Cl(mktdata )), n = 200), \n                  \n                  # Label your indicator SMA200\n                  label = \"SMA200\")\n\n# 3.5. Implementing an indicator - II ----\n    # Add a 50-day simple moving average indicator to your strategy\n    add.indicator(strategy = strategy.st, \n                  \n                  # Add the SMA function\n                  name = \"SMA\", \n                  \n                  # Create a lookback period\n                  arguments = list(x = quote(Cl(mktdata)), n = 50), \n                  \n                  # Label your indicator SMA50\n                  label = \"SMA50\")\n    \n# 3.6. Implementing an indicator - III ----\n    # add an RSI 3 indicator to your strategy\n    add.indicator(strategy = strategy.st, \n                  \n                  # add an RSI function to your strategy\n                  name = \"RSI\", \n                  \n                  # use a lookback period of 3 days\n                  arguments = list(price = quote(Cl(mktdata)), n = 3), \n                  \n                  # label it RSI_3\n                  label = \"RSI_3\")\n    \n# 3.7. Code your own indicator - I ----\n    # Write the RSI_avg function\n    RSI_avg <- function(price, n1, n2) {\n      \n      # RSI 1 takes an input of the price and n1\n      rsi_1 <- RSI(price = price, n = n1)\n      \n      # RSI 2 takes an input of the price and n2\n      rsi_2 <- RSI(price = price, n = n2)\n      \n      # RSI_avg is the average of rsi_1 and rsi_2\n      RSI_avg <- (rsi_1 + rsi_2)/2\n      \n      # Your output of RSI_avg needs a column name of \"RSI_avg\"\n      colnames(RSI_avg) <- \"RSI_avg\"\n      return(RSI_avg)\n    }\n    \n    # Add the RSI_avg function to your strategy using an n1 of 3 and an n2 of 4, and label it \"RSI_3_4\"\n    add.indicator(strategy.st, name = \"RSI_avg\", arguments = list(price = quote(Cl(mktdata)), n1 = 3, n2 = 4), label = \"RSI_3_4\")\n    \n# 3.8. Code your own indicator - II ----\n    # Declare the DVO function. The first argument is the high, low, and close of market data.\n    DVO <- function(HLC, navg = 2, percentlookback = 126) {\n      \n      # Compute the ratio between closing prices to the average of high and low\n      ratio <- Cl(HLC)/((Hi(HLC) + Lo(HLC))/2)\n      \n      # Smooth out the ratio outputs using a moving average\n      avgratio <- SMA(ratio, n = navg)\n      \n      # Convert ratio into a 0-100 value using runPercentRank function\n      out <- runPercentRank(avgratio, n = percentlookback, exact.multiplier = 1) * 100\n      colnames(out) <- \"DVO\"\n      return(out)\n    }\n    \n# 3.9. Apply your own indicator ----\n    # add the DVO indicator to your strategy\n    add.indicator(strategy = strategy.st, name = \"DVO\", \n                  arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),\n                  label = \"DVO_2_126\")\n    \n    # use applyIndicators to test out your indicators\n    test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(SPY))\n    \n    # subset your data between Sep. 1 and Sep. 5 of 2013\n    test_subset <- test[\"2013-09-01/2013-09-05\"]\n    \n    \n# 4. Chapter 4: Signals   -----\n# 4.1. Using sigComparison ----\n    # add a sigComparison which specifies that SMA50 must be greater than SMA200, call it longfilter\n    add.signal(strategy.st, name = \"sigComparison\", \n               \n               # we are interested in the relationship between the SMA50 and the SMA200\n               arguments = list(columns = c(\"SMA50\", \"SMA200\"), \n                                \n                                # particularly, we are interested when the SMA50 is greater than the SMA200\n                                relationship = \"gt\"),\n               \n               # label this signal longfilter\n               label = \"longfilter\")\n    \n# 4.2. Using sigCrossover ----\n    # add a sigCrossover which specifies that the SMA50 is less than the SMA200 and label it filterexit\n    add.signal(strategy.st, name = \"sigCrossover\",\n               \n               # we're interested in the relationship between the SMA50 and the SMA200\n               arguments = list(columns = c(\"SMA50\", \"SMA200\"),\n                                \n                                # the relationship is that the SMA50 crosses under the SMA200\n                                relationship = \"lt\"),\n               \n               # label it filterexit\n               label = \"filterexit\")\n    \n# 4.3. Using sigCrossover ----\n    ",
    "created" : 1493070816740.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2928855233",
    "id" : "B7E8F026",
    "lastKnownWriteTime" : 1493159213,
    "last_content_update" : 1493159213132,
    "path" : "C:/Users/d91067/Desktop/datacamp/Finance/04_Financial_Trading_in_R.R",
    "project_path" : "04_Financial_Trading_in_R.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}