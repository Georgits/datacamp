{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(ggthemes)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(grid)\nlibrary(data.table)\nlibrary(lattice)\n\n# 1. Chapter 1: ---- \n# Statistics\n    \n    # Smoothing ----\n\n    # ggplot2 is already loaded\n    \n    # Explore the mtcars data frame with str()\n    str(mtcars)\n    \n    # A scatter plot with LOESS smooth:\n    ggplot(mtcars, aes(x = wt, y = mpg)) +\n      geom_point() +\n      geom_smooth()\n    \n    # A scatter plot with an ordinary Least Squares linear model:\n    ggplot(mtcars, aes(x = wt, y = mpg)) +\n      geom_point() +\n      geom_smooth(method = \"lm\")\n    \n    # The previous plot, without CI ribbon:\n    ggplot(mtcars, aes(x = wt, y = mpg)) +\n      geom_point() +\n      geom_smooth(method = \"lm\", se = FALSE)\n    \n    # The previous plot, without points:\n    ggplot(mtcars, aes(x = wt, y = mpg)) +\n      geom_smooth(method = \"lm\", se = FALSE)\n\n    \n    # Grouping variables ----\n    # ggplot2 is already loaded\n    \n    # Define cyl as a factor variable\n    ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +\n      geom_point() +\n      stat_smooth(method = \"lm\", se = F)\n    \n    # Complete the following ggplot command as instructed\n    ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +\n      geom_point() +\n      stat_smooth(method = \"lm\", se = F) +\n      stat_smooth(method = \"lm\", se = F, aes(group = 1))\n    \n    \n    \n    # Modifying stat_smooth ----\n    # Plot 1: change the LOESS span\n    ggplot(mtcars, aes(x = wt, y = mpg)) +\n      geom_point() +\n      # Add span below \n      geom_smooth(se = F, span = 0.7)\n    \n    # Plot 2: Set the overall model to LOESS and use a span of 0.7\n    ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +\n      geom_point() +\n      stat_smooth(method = \"lm\", se = F) +\n      # Change method and add span below\n      stat_smooth(method = \"loess\", aes(group = 1), \n                  se = F, col = \"black\", span = 0.7)\n    \n    # Plot 3: Set col to \"All\", inside the aes layer of stat_smooth()\n    ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +\n      geom_point() +\n      stat_smooth(method = \"lm\", se = F) +\n      stat_smooth(method = \"loess\",\n                  # Add col inside aes()\n                  aes(group = 1, col = \"All\"), \n                  # Remove the col argument below\n                  se = F, span = 0.7)\n    \n    # Plot 4: Add scale_color_manual to change the colors\n    myColors <- c(brewer.pal(3, \"Dark2\"), \"black\")\n    ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +\n      geom_point() +\n      stat_smooth(method = \"lm\", se = F, span = 0.75) +\n      stat_smooth(method = \"loess\", \n                  aes(group = 1, col=\"All\"), \n                  se = F, span = 0.7) +\n      # Add correct arguments to scale_color_manual\n      scale_color_manual(\"Cylinders\", values = myColors)\n    \n    \n    # Modifying stat_smooth (2) ----\n    # Plot 1: Jittered scatter plot, add a linear model (lm) smooth:\n    ggplot(Vocab, aes(x = education, y = vocabulary)) +\n      geom_jitter(alpha = 0.2) +\n      stat_smooth(method = \"lm\", se = FALSE)\n    \n    # Plot 2: Only lm, colored by year\n    ggplot(Vocab, aes(x = education, y = vocabulary, col = factor(year))) +\n      stat_smooth(method = \"lm\", se = FALSE)\n    \n    # Plot 3: Set a color brewer palette\n    ggplot(Vocab, aes(x = education, y = vocabulary, col = factor(year))) +\n      stat_smooth(method = \"lm\", se = FALSE) +\n      scale_color_brewer()\n    \n    # Plot 4: Add the group, specify alpha and size\n    ggplot(Vocab, aes(x = education, y = vocabulary, col = year, group = factor(year))) +\n      stat_smooth(method = \"lm\", se = F, alpha = 0.6, size = 2) +\n      scale_color_gradientn(colors = brewer.pal(9,\"YlOrRd\"))\n    \n    \n    # Quantiles ----\n    # Use stat_quantile instead of stat_smooth:\n    ggplot(Vocab, aes(x = education, y = vocabulary, col = year, group = factor(year))) +\n      stat_quantile(alpha = 0.6, size = 2) +\n      scale_color_gradientn(colors = brewer.pal(9,\"YlOrRd\"))\n    \n    # Set quantile to 0.5:\n    ggplot(Vocab, aes(x = education, y = vocabulary, col = year, group = factor(year))) +\n      stat_quantile(quantiles = 0.5, alpha = 0.6, size = 2) +\n      scale_color_gradientn(colors = brewer.pal(9,\"YlOrRd\"))\n    \n    \n    # Sum ----\n    # Plot with linear and loess model\n    p <- ggplot(Vocab, aes(x = education, y = vocabulary)) +\n      stat_smooth(method = \"loess\", aes(col = \"red\"), se = F) +\n      stat_smooth(method = \"lm\", aes(col = \"blue\"), se = F) +\n      scale_color_discrete(\"Model\", labels = c(\"red\" = \"LOESS\", \"blue\" = \"lm\"))\n    \n    # Add stat_sum\n    # This will map the overall count of each dot onto size. \n    # You don't have to set any arguments, the aesthetics will be inherited from the base plot!\n    p + stat_sum()\n    \n    # Add stat_sum and set size range\n    p +  stat_sum() + scale_size(range = c(1,10))\n    \n    \n    \n    \n    # Stats outside Geoms: Preparations ----\n    # Display structure of mtcars\n    str(mtcars)\n    \n    # Convert cyl and am to factors:\n    mtcars$cyl <- as.factor(mtcars$cyl)\n    mtcars$am <- as.factor(mtcars$am)\n    \n    # Define positions:\n    posn.d <- position_dodge(width = 0.1)\n    posn.jd <- position_jitterdodge(jitter.width = 0.1, dodge.width = 0.2) \n    posn.j <- position_jitter(width = 0.2)\n    \n    # base layers:\n    wt.cyl.am <- ggplot(mtcars, aes(x = cyl, y = wt, col = am, fill = am, group = am))\n    \n    \n    # Plotting variations ----\n    # Remember that you can always specify your own function to the fun.data argument as long \n    # as the variable names match the aesthetics that you will need for the geom layer. \n    \n    # Plot 1: Jittered, dodged scatter plot with transparent points\n    wt.cyl.am +\n      geom_point(position = posn.jd, alpha = 0.6)\n    \n    # Plot 2: Mean and SD - the easy way\n    wt.cyl.am +\n      stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), position = posn.d)\n    \n    # Plot 3: Mean and 95% CI - the easy way\n    wt.cyl.am +\n      stat_summary(fun.data = mean_cl_normal,position = posn.d)\n    \n    # Plot 4: Mean and SD - with T-tipped error bars - fill in ___\n    wt.cyl.am +\n      stat_summary(geom = \"point\", fun.y = mean, \n                   position = posn.d) +\n      stat_summary(geom = \"errorbar\", fun.data = mean_sdl, \n                   position = posn.d, fun.args = list(mult = 1), width = 0.1)\n    \n    \n    \n    \n    # Custom Functions ----\n    xx <- seq(1,100,1)\n    \n    # Play vector xx is available\n    \n    # Function to save range for use in ggplot \n    gg_range <- function(x) {\n      # Change x below to return the instructed values\n      data.frame(ymin = min(x), # Min\n                 ymax = max(x)) # Max\n    }\n    \n    gg_range(xx)\n    # Required output:\n    #   ymin ymax\n    # 1    1  100\n    \n    # Function to Custom function:\n    med_IQR <- function(x) {\n      # Change x below to return the instructed values\n      data.frame(y = median(x), # Median\n                 ymin = quantile(x)[2], # 1st quartile\n                 ymax = quantile(x)[4])  # 3rd quartile\n    }\n    \n    med_IQR(xx)\n    # Required output:\n    #        y  ymin  ymax\n    # 25% 50.5 25.75 75.25\n    \n    \n    # Custom Functions (2) ----\n    # The base ggplot command, you don't have to change this\n    wt.cyl.am <- ggplot(mtcars, aes(x = cyl,y = wt, col = am, fill = am, group = am))\n    \n    # Add three stat_summary calls to wt.cyl.am\n    wt.cyl.am + \n      stat_summary(geom = \"linerange\", fun.data = med_IQR, \n                   position = posn.d, size = 3) +\n      stat_summary(geom = \"linerange\", fun.data = gg_range, \n                   position = posn.d, size = 3, \n                   alpha = 0.4) +\n      stat_summary(geom = \"point\", fun.y = median, \n                   position = posn.d, size = 3, \n                   col = \"black\", shape = \"X\")\n\n    \n    \n# 2. Chapter 2: ---- \n# Coordinates and Facets ----\n    # Zooming In ----\n    # Basic ggplot() command, coded for you\n    p <- ggplot(mtcars, aes(x = wt, y = hp, col = am)) + geom_point() + geom_smooth()\n    \n    # Add scale_x_continuous\n    p + scale_x_continuous(limits = c(3, 6), expand = c(0,0))\n    \n    # The proper way to zoom in:\n    p + coord_cartesian(xlim = c(3,6))\n    \n    \n    \n    # Aspect Ratio ----\n    # Complete basic scatter plot function\n    base.plot <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +\n      geom_jitter() +\n      geom_smooth(method = \"lm\", se = F)\n    \n    # Plot base.plot: default aspect ratio\n    base.plot\n    \n    # Fix aspect ratio (1:1) of base.plot\n    base.plot + coord_equal(1:1)\n    \n    \n    \n    # Pie Charts ----\n    # Create stacked bar plot: thin.bar\n    thin.bar <- ggplot(mtcars, aes(x = 1, fill = cyl)) +\n      geom_bar()\n    \n    # Convert thin.bar to pie chart\n    # Set the argument theta to \"y\". This specified the axis which would be transformed to polar coordinates. \n    # There's a ring structure instead of a pie!\n    thin.bar + coord_polar(theta = \"y\")\n    \n    # Create stacked bar plot: wide.bar\n    wide.bar <- ggplot(mtcars, aes(x = 1, fill = cyl)) +\n      geom_bar(width = 1)\n    \n    # Convert wide.bar to pie chart\n    wide.bar + coord_polar(theta = \"y\")\n    \n    \n    \n    # Facets: the basics ----\n    # Basic scatter plot:\n    p <- ggplot(mtcars, aes(x = wt, y = mpg)) +\n      geom_point()\n    \n    # Separate rows according to transmission type, am\n    p + facet_grid(~ am )\n    \n    # Separate columns according to cylinders, cyl\n    p + facet_grid(~ cyl )\n    \n    # Separate by both columns and rows \n    p + facet_grid(am ~ cyl)\n    \n    \n    \n    \n    # !!!! Many variables ----\n    # Code to create the cyl_am col and myCol vector\n    mtcars$cyl_am <- paste(mtcars$cyl, mtcars$am, sep = \"_\")\n    myCol <- rbind(brewer.pal(9, \"Blues\")[c(3,6,8)],\n                   brewer.pal(9, \"Reds\")[c(3,6,8)])\n    \n    # Basic scatter plot, add color scale:\n    ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +\n      geom_point() +\n      scale_color_manual(values = myCol)\n    \n    # Facet according on rows and columns.\n    ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +\n      geom_point() +\n      scale_color_manual(values = myCol) +\n      facet_grid(gear ~ vs)\n    \n    # Add more variables\n    ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am, size = disp)) + geom_point() +\n      scale_color_manual(values = myCol) +\n      facet_grid(gear ~ vs)\n    \n    \n    # Dropping levels ----\n    # When you have a categorical variable with many levels which are not all present in sub-groups of another variable, \n    # it may be desirable to drop the unused levels. \n    # Basic scatter plot\n    ggplot(msleep, aes(x = sleep_total, y = name, col = order)) +\n      geom_point()\n    \n    # Facet rows accoding to vore\n    ggplot(msleep, aes(x = sleep_total, y = name, col = order)) +\n      geom_point() +\n      facet_grid(vore ~ .)\n    \n    # !!! Specify scale and space arguments to free up rows\n    ggplot(msleep, aes(x = sleep_total, y = name, col = order)) +\n      geom_point() +\n      facet_grid(vore ~ ., scale = \"free_y\", space = \"free_y\")\n    \n    \n    \n    \n    \n# 3. Chapter 3: Themes ---- \n# Themes from Scratch\n    z <- ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) + \n      geom_point() + \n      facet_grid(~ cyl) + \n      geom_smooth(method = \"lm\", se = FALSE)\n    \n    myPink <- \"#FEE0D2\"\n    myRed <-  \"#99000D\"\n    \n    # Rectangles\n    # Plot 1: change the plot background color to myPink:\n    z + theme(plot.background = element_rect(fill = myPink))\n    \n    # Plot 2: adjust the border to be a black line of size 3\n    z + theme(plot.background = element_rect(fill = myPink, color = \"black\", size = 3))\n    \n    # Plot 3: set panel.background, legend.key, legend.background and strip.background to element_blank()\n    uniform_panels <- theme(panel.background = element_blank(), \n                            legend.key = element_blank(), \n                            legend.background = element_blank(), \n                            strip.background = element_blank())\n    z + theme(plot.background = element_rect(fill = myPink, color = \"black\", size = 3)) + uniform_panels\n    \n    \n    # Lines ----\n    # Extend z with theme() function and three arguments\n    z + theme(panel.grid = element_blank(),\n              axis.line = element_line(color = \"black\"),\n              axis.ticks = element_line(color = \"black\"))\n    \n    \n    # Text ----\n    # Extend z with theme() function and four arguments\n    z + theme(\n      strip.text = element_text(size = 16, color = myRed),\n      axis.title.y = element_text(color = myRed, hjust = 0, face = \"italic\"),\n      axis.title.x = element_text(color = myRed, hjust = 0, face = \"italic\"),\n      axis.text = element_text(color = \"black\"))\n    \n    \n    \n    # Legends ----\n    # Move legend by position\n    z + theme(legend.position = c(0.85, 0.85))\n    \n    # Change direction\n    z + theme(legend.direction = \"horizontal\")\n    \n    # Change location by name\n    z + theme(legend.position = \"bottom\")\n    \n    # Remove legend entirely\n    z + theme(legend.position = \"none\")\n    \n    \n    # positions ----\n    library(grid)\n    # Increase spacing between facets\n    z + theme(panel.spacing.x = unit(2, \"cm\"))\n    \n    \n    # Add code to remove any excess plot margin space\n    z + theme(panel.spacing.x = unit(2, \"cm\"),\n              plot.margin = unit(c(0,0,0,0), \"cm\"))\n    \n    \n    \n    \n    # Update Themestheme update----\n    # Theme layer saved as an object, theme_pink\n    theme_pink <- theme(panel.background = element_blank(),\n                        legend.key = element_blank(),\n                        legend.background = element_blank(),\n                        strip.background = element_blank(),\n                        plot.background = element_rect(fill = myPink, color = \"black\", size = 3),\n                        panel.grid = element_blank(),\n                        axis.line = element_line(color = \"black\"),\n                        axis.ticks = element_line(color = \"black\"),\n                        strip.text = element_text(size = 16, color = myRed),\n                        axis.title.y = element_text(color = myRed, hjust = 0, face = \"italic\"),\n                        axis.title.x = element_text(color = myRed, hjust = 0, face = \"italic\"),\n                        axis.text = element_text(color = \"black\"),\n                        legend.position = \"none\")\n    \n    # Apply theme_pink to z2\n    z + theme_pink\n    \n    # Change code so that old theme is saved as old\n    old <- theme_update(panel.background = element_blank(),\n                        legend.key = element_blank(),\n                        legend.background = element_blank(),\n                        strip.background = element_blank(),\n                        plot.background = element_rect(fill = myPink, color = \"black\", size = 3),\n                        panel.grid = element_blank(),\n                        axis.line = element_line(color = \"black\"),\n                        axis.ticks = element_line(color = \"black\"),\n                        strip.text = element_text(size = 16, color = myRed),\n                        axis.title.y = element_text(color = myRed, hjust = 0, face = \"italic\"),\n                        axis.title.x = element_text(color = myRed, hjust = 0, face = \"italic\"),\n                        axis.text = element_text(color = \"black\"),\n                        legend.position = \"none\")\n    \n    # Display the plot z2\n    z\n    \n    # Restore the old plot\n    theme_set(old)\n    \n    \n    \n    # Exploring ggthemes ----\n    # Apply theme_tufte\n    z + theme_tufte()\n    \n    # Apply theme_tufte, modified:\n    z + theme_tufte() +\n      theme(\n        legend.position = c(0.9, 0.9),\n        legend.title = element_text(face = \"italic\", size = 12),\n        axis.title = element_text(face = \"bold\", size = 14)\n      )\n    \n    \n\n# 4. Chapter 4: ---- \n# Best Practices: Bar Plots ----\n    # Bar Plots (1) ----\n    # Base layers\n    m <- ggplot(mtcars, aes(x = cyl, y = wt))\n    \n    # Draw dynamite plot\n    m +\n      stat_summary(fun.y = mean, geom = \"bar\", fill = \"skyblue\") +\n      stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = \"errorbar\", width = 0.1)\n    \n    \n    # Bar Plots (2) ----\n    # Base layers\n    m <- ggplot(mtcars, aes(x = cyl,y = wt, col = am, fill = am))\n    \n    # Plot 1: Draw dynamite plot\n    m +\n      stat_summary(fun.y = mean, geom = \"bar\") +\n      stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = \"errorbar\", width = 0.1)\n    \n    # Plot 2: Set position dodge in each stat function\n    m +\n      stat_summary(fun.y = mean, geom = \"bar\", position = \"dodge\") +\n      stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), \n                   geom = \"errorbar\", width = 0.1, position = \"dodge\")\n    \n    # Set your dodge posn manually\n    posn.d <- position_dodge(0.9)\n    \n    # Plot 3:  Redraw dynamite plot\n    m +\n      stat_summary(fun.y = mean, geom = \"bar\", position = posn.d) +\n      stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = \"errorbar\", width = 0.1, position = posn.d)\n    \n    \n    \n    \n    \n    # Bar Plots (3) ----\n    mtcars.cyl <- data.table(mtcars)[,list(wt.avg = mean(wt), sd = sd(wt), n = .N, prop = (.N/nrow(mtcars))), by = \"cyl\"]\n    \n    # Base layers\n    m <- ggplot(mtcars.cyl, aes(x = cyl, y = wt.avg))\n    \n    # Plot 1: Draw bar plot\n    m + geom_bar(stat = \"identity\", fill = \"skyblue\")\n    \n    # Plot 2: Add width aesthetic\n    m + geom_bar(stat = \"identity\", aes(width = prop), fill = \"skyblue\")\n    \n    # Plot 3: Add error bars\n    m + geom_bar(stat = \"identity\", aes(width = prop), fill = \"skyblue\") +\n      geom_errorbar(aes(ymin = wt.avg - sd, ymax = wt.avg + sd), width = 0.1)\n  \n    \n    \n# Best Practices: Pie Charts ----\n    # Pie Charts (1) ----\n    # Convert bar chart to pie chart\n    # This is already pretty good, but there's a small hole in the center of the pies.\n    # Inside geom_bar() set width = 1 so that the bars fill up the entire width resulting in a full pie chart.\n    ggplot(mtcars, aes(x = factor(1), fill = am)) +\n      geom_bar(position = \"fill\", width = 1) +\n      facet_grid(~ cyl) + \n      coord_polar(theta = \"y\")\n    \n    \n    # Pie Charts (2) ----\n    # Parallel coordinates plot using GGally\n    library(GGally)\n    \n    # All columns except am\n    group_by_am <- 9\n    my_names_am <- (1:11)[-group_by_am]\n    \n    # Basic parallel plot - each variable plotted as a z-score transformation\n    ggparcoord(mtcars, my_names_am, groupColumn = group_by_am, alpha = 0.8)\n    \n    \n    \n    # !!!! Plot Matrix (1) and (2) ----\n    mtcars %>% \n      select(mpg, disp, drat, wt, qsec) %>% \n      GGally::ggpairs()\n    \n    \n    \n    # Heat Maps ----\n    # Create color palette\n    myColors <- brewer.pal(9, \"Reds\")\n    \n    # Build the heat map from scratch\n    ggplot(barley, aes(x = year, y = variety, fill = yield)) +\n      geom_tile() +\n      facet_wrap(~ site, ncol = 1) +\n      scale_fill_gradientn(colors = myColors)\n    \n\n    \n    # Heat Maps Alternatives (1) ----\n    # The heat map we want to replace\n    # Don't remove, it's here to help you!\n    myColors <- brewer.pal(9, \"Reds\")\n    ggplot(barley, aes(x = year, y = variety, fill = yield)) +\n      geom_tile() +\n      facet_wrap( ~ site, ncol = 1) +\n      scale_fill_gradientn(colors = myColors)\n    \n    # Line plots\n    ggplot(barley, aes(x = year, y = yield, col = variety, group = variety)) +\n      geom_line() + \n      facet_wrap(~ site, nrow = 1)\n    \n    \n    # Heat Maps Alternatives (2) ----\n    # Create overlapping ribbon plot from scratch\n    ggplot(barley, aes(x = year, y = yield, col = site , group = site, fill = site)) +\n      stat_summary(fun.y = mean, geom = \"line\") +\n      stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = \"ribbon\", col = NA, alpha = 0.1)\n    \n    \n    \n# 5. Chapter 5: ---- \n# Case Study ----\n    library(foreign)\n    pathData <- file.path(getwd(), \"chis12_adult_stata\", \"Data\")\n    \n    adult <- read.dta(file.path(pathData, \"ADULT.dta\")) \n    # Explore the dataset with summary and str\n    summary(adult)\n    str(adult)\n    \n    # Age histogram\n    ggplot(adult, aes(x = srage_p1)) + geom_histogram(stat = \"count\")\n    \n    # BMI histogram\n    ggplot(adult, aes(x = bmi_p)) + geom_histogram()\n    \n    # Age colored by BMI, default binwidth\n    ggplot(adult, aes(x = srage_p1, fill = factor(rbmi))) + geom_histogram(binwidth = 1, stat = \"count\")\n    \n    \n    # Data Cleaning ----\n    # # Remove individual aboves 84\n    # adult <- adult[adult$srage_p1 <= 84, ] \n    # \n    # # Remove individuals with a BMI below 16 and above or equal to 52\n    # adult <- adult[adult$bmi_p >= 16 & adult$bmi_p < 52, ]\n    # \n    # # Relabel the race variable:\n    # adult$RACEHPR2 <- factor(adult$RACEHPR2, labels = c(\"Latino\", \"Asian\", \"African American\", \"White\"))\n    # \n    # # Relabel the BMI categories variable:\n    # adult$rbmi <- factor(adult$rbmi, labels = c(\"Under-weight\", \"Normal-weight\", \"Over-weight\", \"Obese\"))\n    # \n    \n    # Multiple Histograms ----\n    # The dataset adult is available\n    \n    # The color scale used in the plot\n    BMI_fill <- scale_fill_brewer(\"BMI Category\", palette = \"Reds\")\n    \n    # Theme to fix category display in faceted plot\n    fix_strips <- theme(strip.text.y = element_text(angle = 0, hjust = 0, vjust = 0.1, size = 14),\n                        strip.background = element_blank(), \n                        legend.position = \"none\")\n    \n    # Histogram, add BMI_fill and customizations\n    ggplot(adult, aes(x = srage_p1, fill =  factor(rbmi))) + \n      geom_histogram(binwidth = 1, stat = \"count\") +\n      fix_strips +\n      BMI_fill +\n      facet_grid(~ rbmi) +\n      theme_classic()\n    \n    \n    # Alternatives ----\n    # Plot 1 - Count histogram\n    ggplot(adult, aes (x = srage_p1, fill = factor(rbmi))) + \n      geom_histogram(binwidth = 1, stat = \"count\") +\n      BMI_fill\n    \n    # # Plot 2 - Density histogram\n    # ggplot(adult, aes (x = srage_p1, fill = factor(rbmi))) + \n    #   geom_histogram(aes(y = ..density..), binwidth = 1, stat = \"count\") +\n    #   BMI_fill\n    \n    # Plot 3 - Faceted count histogram\n    ggplot(adult, aes (x = srage_p1, fill= factor(rbmi))) + \n      geom_histogram(binwidth = 1, stat = \"count\") +\n      BMI_fill +\n      facet_grid(rbmi ~.)\n    \n    # # Plot 4 - Faceted density histogram\n    # ggplot(adult, aes (x = srage_p1, fill= factor(rbmi))) + \n    #   geom_histogram(aes(y = ..density..), binwidth = 1) +\n    #   BMI_fill + \n    #   facet_grid(rbmi ~ .)\n    \n    # # Plot 5 - Density histogram with position = ill\"\n    # ggplot(adult, aes (x = srage_p1, fill= factor(rbmi))) + \n    #   geom_histogram(aes(y = ..density..), binwidth = 1, position = \"fill\", stat = \"count\") +\n    #   BMI_fill\n    \n    # Plot 6 - The accurate histogram\n    ggplot(adult, aes (x = srage_p1, fill= factor(rbmi))) + \n      geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = \"fill\", stat = \"count\") +\n      BMI_fill\n    \n    \n    \n    # Do Things Manually -----\n    # An attempt to facet the accurate frequency rbmi from before (failed)\n    ggplot(adult, aes (x = srage_p1, fill= factor(rbmi))) + \n      geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = \"fill\", stat = \"count\") +\n      BMI_fill +\n      facet_grid(rbmi ~ .)\n    \n    # Create DF with table()\n    DF <- table(adult$rbmi, adult$srage_p1)\n    \n    # Use apply on DF to get frequency of each group\n    DF_freq <- apply(DF, 2, function(x) x/sum(x))\n    \n    # Load reshape2 and use melt on DF to create DF_melted\n    library(reshape2)\n    \n    # Change names of DF_melted\n    DF_melted <- melt(DF_freq)\n    names(DF_melted) <- c(\"FILL\", \"X\", \"value\")\n    \n    # Add code to make this a faceted plot\n    ggplot(DF_melted, aes(x = X, y = value, fill = FILL)) +\n      geom_bar(stat = \"identity\", position = \"stack\") +\n      BMI_fill + \n      facet_grid(FILL ~ .)\n    \n    \n    \n    # Merimeko/Mosaic Plot ----\n    # The initial contingency table\n    DF <- as.data.frame.matrix(table(adult$srage_p1, adult$rbmi))\n    \n    # Add the columns groupsSum, xmax and xmin. Remove groupSum again.\n    DF$groupSum <- rowSums(DF)\n    DF$xmax <- cumsum(DF$groupSum)\n    DF$xmin <- DF$xmax - DF$groupSum\n    # The groupSum column needs to be removed, don't remove this line\n    DF$groupSum <- NULL\n    \n    # Copy row names to variable X\n    DF$X <- row.names(DF)\n    \n    # Melt the dataset\n    library(reshape2)\n    DF_melted <- melt(DF, id.vars = c(\"X\", \"xmin\", \"xmax\"), variable.name = \"FILL\")\n    \n    # dplyr call to calculate ymin and ymax - don't change\n    library(dplyr)\n    DF_melted <- DF_melted %>% \n      group_by(X) %>% \n      mutate(ymax = cumsum(value/sum(value)),\n             ymin = ymax - value/sum(value))\n    \n    # Plot rectangles - don't change.\n    library(ggthemes)\n    ggplot(DF_melted, aes(ymin = ymin, \n                          ymax = ymax,\n                          xmin = xmin, \n                          xmax = xmax, \n                          fill = FILL)) + \n      geom_rect(colour = \"white\") +\n      scale_x_continuous(expand = c(0,0)) +\n      scale_y_continuous(expand = c(0,0)) +\n      BMI_fill +\n      theme_tufte()\n    \n    \n    \n    # Adding statistics ----\n    # Perform chi.sq test (RBMI and SRAGE_P)\n    results <- chisq.test(table(adult$rbmi, adult$srage_p1))\n    \n    # Melt results$residuals and store as resid\n    resid <- melt(results$residuals)\n    \n    # Change names of resid\n    names(resid) <- c(\"FILL\", \"X\", \"residual\")\n    \n    # merge the two datasets:\n    DF_all <- merge(DF_melted, resid, by = c(\"X\", \"FILL\"))\n    \n    # Update plot command\n    library(ggthemes)\n    ggplot(DF_all, aes(ymin = ymin, \n                       ymax = ymax,\n                       xmin = xmin, \n                       xmax = xmax, \n                       fill = residual)) + \n      geom_rect() +\n      scale_fill_gradient2() +\n      scale_x_continuous(expand = c(0,0)) +\n      scale_y_continuous(expand = c(0,0)) +\n      theme_tufte()\n    \n    \n    # Adding text ----\n    # Position for labels on x axis\n    DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2\n    \n    # Position for labels on y axis (don't change)\n    index <- DF_all$xmax == max(DF_all$xmax)\n    DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2\n    \n    # Plot\n    ggplot(DF_all, aes(ymin = ymin, ymax = ymax, xmin = xmin, \n                       xmax = xmax, fill = residual)) + \n      geom_rect(col = \"white\") +\n      # geom_text for ages (i.e. the x axis)\n      geom_text(aes(x = xtext, \n                    label = X),\n                y = 1,\n                size = 3,\n                angle = 90,\n                hjust = 1,\n                show.legend = FALSE) +\n      # geom_text for BMI (i.e. the fill axis)\n      geom_text(aes(x = max(xmax), \n                    y = ytext,\n                    label = FILL),\n                size = 3,\n                hjust = 1,\n                show.legend  = FALSE) +\n      scale_fill_gradient2() +\n      theme_tufte() +\n      theme(legend.position = \"bottom\")\n    \n    \n    \n    # Generalizations ----\n    # Load all packages\n    library(ggplot2)\n    library(reshape2)\n    library(dplyr)\n    library(ggthemes)\n    \n    # Script generalized into a function\n    mosaicGG <- function(data, X, FILL) {\n      \n      # Proportions in raw data\n      DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))\n      DF$groupSum <- rowSums(DF)\n      DF$xmax <- cumsum(DF$groupSum)\n      DF$xmin <- DF$xmax - DF$groupSum\n      DF$X <- row.names(DF)\n      DF$groupSum <- NULL\n      DF_melted <- melt(DF, id = c(\"X\", \"xmin\", \"xmax\"), variable.name = \"FILL\")\n      library(dplyr)\n      DF_melted <- DF_melted %>% \n        group_by(X) %>% \n        mutate(ymax = cumsum(value/sum(value)),\n               ymin = ymax - value/sum(value))\n      \n      # Chi-sq test\n      results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x\n      resid <- melt(results$residuals)\n      names(resid) <- c(\"FILL\", \"X\", \"residual\")\n      \n      # Merge data\n      DF_all <- merge(DF_melted, resid)\n      \n      # Positions for labels\n      DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2\n      index <- DF_all$xmax == max(DF_all$xmax)\n      DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2\n      \n      # plot:\n      g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin, \n                              xmax = xmax, fill = residual)) + \n        geom_rect(col = \"white\") +\n        geom_text(aes(x = xtext, label = X),\n                  y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +\n        geom_text(aes(x = max(xmax),  y = ytext, label = FILL),\n                  size = 3, hjust = 1, show.legend = FALSE) +\n        scale_fill_gradient2(\"Residuals\") +\n        scale_x_continuous(\"Individuals\", expand = c(0,0)) +\n        scale_y_continuous(\"Proportion\", expand = c(0,0)) +\n        theme_tufte() +\n        theme(legend.position = \"bottom\")\n      print(g)\n    }\n    \n    # BMI described by age\n    mosaicGG(adult, \"srage_p1\",\"rbmi\")\n    \n    # Poverty described by age\n    mosaicGG(adult, \"srage_p1\",\"povll\")\n    \n    # mtcars: am described by cyl\n    mosaicGG(mtcars, \"cyl\",\"am\")\n    \n    # Vocab: vocabulary described by education\n    library(car)\n    mosaicGG(Vocab, \"education\",\"vocabulary\")",
    "created" : 1494224312740.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2526521372",
    "id" : "9001E50A",
    "lastKnownWriteTime" : 1494776286,
    "last_content_update" : 1494776286248,
    "path" : "C:/Users/d91067/Desktop/datacamp/DataVisualization/Data_Visualization_with_ggplot2/Data_Visualization_with_ggplot2_part2.R",
    "project_path" : "Data_Visualization_with_ggplot2_part2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}