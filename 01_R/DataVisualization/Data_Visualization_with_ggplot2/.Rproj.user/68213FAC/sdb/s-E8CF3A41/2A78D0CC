{
    "collab_server" : "",
    "contents" : "library(RColorBrewer)\nlibrary(ggplot2)\nlibrary(car)\ndata(Vocab)\nlibrary(tidyr)\ndata(economics)\nrecess <- data.frame(\n  begin = as.Date(c(\"1969-12-01\", \"1973-11-01\", \"1980-01-01\", \"1981-07-01\", \"1990-07-01\", \"2001-03-01\")),\n  end = as.Date(c(\"1970-11-01\", \"1975-03-01\", \"1980-07-01\", \"1982-11-01\", \"1991-03-01\", \"2001-11-01\"))\n)\n\n\n# 1. Chapter 1: ---- \n# Introduction\n  # Load the ggplot2 package\n\n  # Explore the mtcars data frame with str()\n  str(mtcars)\n  \n  # Execute the following command\n  ggplot(mtcars, aes(x = cyl, y = mpg)) +\n    geom_point()\n\n  # Change the command below so that cyl is treated as factor\n  ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +\n    geom_point()\n  \n  # Load the ggplot2 package\n\n  # Change the command below so that cyl is treated as factor\n  ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +\n    geom_point()\n  \n  # Explore the diamonds data frame with str()\n  str(diamonds)\n  \n  # Add geom_point() with +\n  ggplot(diamonds, aes(x = carat, y = price)) +\n    geom_point()\n  \n  \n  # Add geom_point() and geom_smooth() with +\n  ggplot(diamonds, aes(x = carat, y = price)) +\n    geom_point() +\n    geom_smooth()\n  \n  # Copy the above command but show only the smooth line\n  ggplot(diamonds, aes(x = carat, y = price)) +\n    geom_smooth()\n  \n  # Copy the above command and assign the correct value to col in aes()\n  ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +\n    geom_smooth()\n  \n  # Keep the color settings from previous command. Plot only the points with argument alpha.\n  ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +\n    geom_point(alpha = 0.4)\n  \n  # Create the object containing the data and aes layers: dia_plot\n  dia_plot <- ggplot(data = diamonds, aes(x = carat, y = price))\n  \n  # Add a geom layer with + and geom_point()\n  dia_plot +\n    geom_point()\n  \n  # Add the same geom layer, but with aes() inside\n  dia_plot +\n    geom_point(aes(col = clarity))\n  \n  set.seed(1)\n  \n  # The dia_plot object has been created for you\n  dia_plot <- ggplot(diamonds, aes(x = carat, y = price))\n  \n  # Expand dia_plot by adding geom_point() with alpha set to 0.2\n  dia_plot + geom_point(alpha = 0.2)\n  \n  # Plot dia_plot with additional geom_smooth() with se set to FALSE\n  dia_plot + geom_point(alpha = 0.2) + geom_smooth(se = FALSE)\n  \n  # Copy the command from above and add aes() with the correct mapping to geom_smooth()\n  dia_plot + geom_point(alpha = 0.2) + geom_smooth(se = FALSE, aes(col = clarity))\n  \n  \n# 2. Chapter 2: ---- \n# Data\n  # Plot the correct variables of mtcars\n  plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)\n  \n  # Change cyl inside mtcars to a factor\n  mtcars$cyl <- as.factor(mtcars$cyl)\n  \n  # Make the same plot as in the first instruction\n  plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)\n  \n  # Basic plot\n  mtcars$cyl <- as.factor(mtcars$cyl)\n  plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)\n  \n  # Use lm() to calculate a linear model and save it as carModel\n  carModel <- lm(mpg ~ wt, data = mtcars)\n  \n  # Call abline() with carModel as first argument and set lty to 2\n  abline(carModel, lty = 2)\n  \n  # Plot each subset efficiently with lapply\n  # You don't have to edit this code\n  lapply(mtcars$cyl, function(x) {\n    abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)\n  })\n  \n  # This code will draw the legend of the plot\n  # You don't have to edit this code\n  legend(x = 5, y = 33, legend = levels(mtcars$cyl),\n         col = 1:3, pch = 1, bty = \"n\")\n  \n  # Convert cyl to factor (don't need to change)\n  mtcars$cyl <- as.factor(mtcars$cyl)\n  \n  # Example from base R (don't need to change)\n  plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)\n  abline(lm(mpg ~ wt, data = mtcars), lty = 2)\n  lapply(mtcars$cyl, function(x) {\n    abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)\n  })\n  legend(x = 5, y = 33, legend = levels(mtcars$cyl),\n         col = 1:3, pch = 1, bty = \"n\")\n  \n  # Plot 1: add geom_point() to this command to create a scatter plot\n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n    geom_point()  # Fill in using instructions Plot 1\n  \n  # Plot 2: include the lines of the linear models, per cyl\n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n    geom_point() + # Copy from Plot 1\n    geom_smooth(aes(method = \"lm\", se = FALSE, col = cyl))   # Fill in using instructions Plot 2\n  \n  # Plot 3: include a lm for the entire dataset in its whole\n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n    geom_point() + # Copy from Plot 2\n    geom_smooth(aes(method = \"lm\", se = FALSE, col = cyl)) + # Copy from Plot 2\n    geom_smooth(aes(group  = 1, method = \"lm\", se = FALSE), linetype = 2)   # Fill in using instructions Plot 3\n  #  the group aesthetic will tell ggplot() to draw a single linear model through all the points.\n  \n  \n  \n  \n  \n  \n  # Load the tidyr package\n  \n  # Add column with unique ids (don't need to change)\n  iris$Flower <- 1:nrow(iris)\n  \n  # Fill in the ___ to produce to the correct iris.wide dataset\n  iris.wide <- iris %>%\n    gather(key, value, -Species , -Flower) %>%\n    separate(key, c(\"Part\", \"Measure\"), \"\\\\.\") %>%\n    spread(Measure, value)\n  \n  # Fill in the ___ to produce to the correct iris.tidy dataset\n  iris.tidy <- iris %>%\n    gather(key, Value, -Species) %>%\n    separate(key, c(\"Part\", \"Measure\"), \"\\\\.\")\n  \n  # Consider the structure of iris, iris.wide and iris.tidy (in that order)\n  str(iris)\n  str(iris.wide)\n  str(iris.tidy)\n\n  # Think about which dataset you would use to get the plot shown right\n  # Fill in the ___ to produce the plot given to the right\n  ggplot(iris.wide, aes(x = Length, y = Width, col = Part)) +\n    geom_jitter() +\n    facet_grid(. ~ Species)\n  \n  # Think about which dataset you would use to get the plot shown right\n  # Fill in the ___ to produce the plot given to the right\n  ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +\n    geom_jitter() +\n    facet_grid(. ~ Measure)\n  \n# 3. Chapter 3: ---- \n# Aesthetics\n  # Map cyl to y\n  ggplot(mtcars, aes(x = mpg, y = cyl)) + \n    geom_point()\n  \n  # Map cyl to x\n  ggplot(mtcars, aes(x = cyl, y = mpg)) + \n    geom_point()\n  \n  # Map cyl to col\n  ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) + \n    geom_point()\n  \n  # Change shape and size of the points in the above plot\n  ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) + \n    geom_point(shape = 1, size = 4)\n  \n  # Given from the previous exercise\n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n    geom_point(shape = 1, size = 4)\n  \n  # Map cyl to fill\n  ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n    geom_point()\n  \n  # Change shape, size and alpha of the points in the above plot\n  ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n    geom_point(shape = 16, size = 6, alpha = 0.6)\n  \n  # Map cyl to size\n  ggplot(mtcars, aes(x = wt, y = mpg, size = cyl)) +\n    geom_point()\n  \n  # Map cyl to alpha\n  ggplot(mtcars, aes(x = wt, y = mpg, alpha = cyl)) +\n    geom_point()\n  \n  # Map cyl to shape \n  ggplot(mtcars, aes(x = wt, y = mpg, shape = cyl)) +\n    geom_point()\n  \n  # Map cyl to labels\n  ggplot(mtcars, aes(x = wt, y = mpg, label = cyl)) +\n    geom_text()\n  \n  \n  # Define a hexadecimal color\n  my_color <- \"#123456\"\n  \n  # Set the color aesthetic \n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n    geom_point()\n  \n  # Set the color aesthetic and attribute \n  # Notice that if an aesthetic and an attribute are set with the same argument, the attribute takes precedence.\n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n    geom_point(col = my_color)\n  \n  # Set the fill aesthetic and color, size and shape attributes\n  ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n    geom_point(size = 10, shape = 23, col = my_color)\n  \n  # Expand to draw points with alpha 0.5\n  ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n    geom_point(alpha = 0.5)\n  \n  # Expand to draw points with shape 24 and color yellow\n  ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n    geom_point(shape = 24, col = \"yellow\")\n  \n  # Expand to draw text with label x, color red and size 10\n  ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl))  +\n    geom_text(col = \"red\", size = 10, label = \"x\")\n  \n  # Map mpg onto x, qsec onto y and factor(cyl) onto col\n  ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl))) +\n    geom_point()\n  \n  # Add mapping: factor(am) onto shape\n  ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am))) +\n    geom_point()\n  \n  # Add mapping: (hp/wt) onto size\n  ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am), size = (hp / wt))) +\n    geom_point()\n  \n  \n  \n  \n  \n  # The base layer, cyl.am, is available for you\n  cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))\n  # Add geom (position = \"stack\" by default)\n  cyl.am + \n    geom_bar()\n  \n  # Fill - show proportion\n  cyl.am + \n    geom_bar(position = \"fill\")  \n  \n  # Dodging - principles of similarity and proximity\n  cyl.am +\n    geom_bar(position = \"dodge\") \n  \n  # Clean up the axes with scale_ functions\n  val = c(\"#E41A1C\", \"#377EB8\")\n  lab = c(\"Manual\", \"Automatic\")\n  cyl.am +\n    geom_bar(position = \"dodge\") +\n    scale_x_discrete(\"Cylinders\") + \n    scale_y_continuous(\"Number\") +\n    scale_fill_manual(\"Transmissions\", \n                      values = val,\n                      labels = lab)\n  \n  \n  \n  # Add a new column called group\n  mtcars$group <- 0\n  \n  # Create jittered plot of mtcars: mpg onto x, group onto y\n  ggplot(mtcars, aes(x = mpg, y = group)) + geom_jitter()\n  \n  # Change the y aesthetic limits\n  ggplot(mtcars, aes(x = mpg, y = group)) + geom_jitter() +\n    scale_y_continuous(limits = c(-2,2))\n  \n  \n  \n  \n  # Basic scatter plot: wt on x-axis and mpg on y-axis; map cyl to col\n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n    geom_point(size = 4)\n  \n  # Hollow circles - an improvement\n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point(size = 4, shape = 1)\n  \n  # Add transparency - very nice\n  ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point(size = 4, shape = 1, alpha = 0.6)\n  \n  \n  \n  \n  # Scatter plot: carat (x), price (y), clarity (col)\n  ggplot(diamonds, aes(x = carat, y = price, col = clarity)) + geom_point()\n  \n  # Adjust for overplotting\n  ggplot(diamonds, aes(x = carat, y = price, col = clarity)) + geom_point(alpha = 0.5)\n  \n  # Scatter plot: clarity (x), carat (y), price (col)\n  ggplot(diamonds, aes(x = clarity, y = carat, col = price)) + geom_point(alpha = 0.5)\n  \n  # Dot plot with jittering\n  ggplot(diamonds, aes(x = clarity, y = carat, col = price)) + geom_point(position = \"jitter\", alpha = 0.5)\n  \n  \n  \n \n  \n# 4. Chapter 4: ---- \n# Geometries\n  \n  # The dataset mtcars is available for you\n  \n  # Plot the cyl on the x-axis and wt on the y-axis\n  ggplot(mtcars, aes(x = cyl, y = wt)) + geom_point()\n  \n  # Use geom_jitter() instead of geom_point()\n  ggplot(mtcars, aes(x = cyl, y = wt)) + geom_jitter()\n  \n  # Define the position object using position_jitter(): posn.j\n  posn.j <- position_jitter(width = 0.1)\n  \n  # Use posn.j in geom_point()\n  ggplot(mtcars, aes(x = cyl, y = wt)) + geom_point(position = posn.j)\n  \n  \n  \n  # Examine the structure of Vocab\n  str(Vocab)\n  \n  # Basic scatter plot of vocabulary (y) against education (x). Use geom_point()\n  ggplot(Vocab, aes(x = education, y = vocabulary)) + geom_point()\n  \n  # Use geom_jitter() instead of geom_point()\n  ggplot(Vocab, aes(x = education, y = vocabulary)) + geom_jitter()\n  \n  # Using the above plotting command, set alpha to a very low 0.2\n  ggplot(Vocab, aes(x = education, y = vocabulary)) + geom_jitter(alpha = 0.2)\n  \n  # Using the above plotting command, set the shape to 1\n  ggplot(Vocab, aes(x = education, y = vocabulary)) + geom_jitter(alpha = 0.2, shape = 1)\n  \n  \n  \n  # Make a univariate histogram\n  ggplot(mtcars, aes(x = mpg)) + \n    geom_histogram()\n  \n  # Change the bin width to 1\n  ggplot(mtcars, aes(x = mpg)) + \n    geom_histogram(binwidth = 1)\n  \n  # Change the y aesthetic to density\n  ggplot(mtcars, aes(x = mpg)) + \n    geom_histogram(aes(y = ..density..), binwidth = 1)\n  \n  # Custom color code\n  myBlue <- \"#377EB8\"\n  \n  # Change the fill color to myBlue\n  ggplot(mtcars, aes(x = mpg)) + \n    geom_histogram(aes(y = ..density..), binwidth = 1, fill = myBlue)\n  \n  \n  # Draw a bar plot of cyl, filled according to am\n  ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()\n  \n  # Change the position argument to stack\n  ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = \"stack\")\n  \n  # Change the position argument to fill\n  ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = \"fill\")\n  \n  # Change the position argument to dodge\n  ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = \"dodge\")\n  \n  \n  \n  # Draw a bar plot of cyl, filled according to am\n  ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = \"stack\")\n  \n  # Change the position argument to \"dodge\"\n  ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = \"dodge\")\n  \n  # Define posn_d with position_dodge()\n  posn_d = position_dodge(width = 0.2)\n  \n  # Change the position argument to posn_d\n  ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d)\n  \n  # Use posn_d as position and adjust alpha to 0.6\n  ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)\n  \n  \n  \n  \n  # A basic histogram, add coloring defined by cyl \n  ggplot(mtcars, aes(mpg, fill = factor(cyl))) +\n    geom_histogram(binwidth = 1)\n  \n  # Change position to identity \n  ggplot(mtcars, aes(mpg, fill = factor(cyl))) +\n    geom_histogram(binwidth = 1, position = \"identity\")\n  \n  # Change geom to freqpoly (position is identity by default) \n  ggplot(mtcars, aes(mpg, col = factor(cyl))) +\n    geom_freqpoly(binwidth = 1)\n  \n  \n  \n  # Bar plots with color ramp, part 1----\n  # Example of how to use a brewed color palette\n  ggplot(mtcars, aes(x = factor(cyl), fill = factor(am))) +\n    geom_bar() +\n    scale_fill_brewer(palette = \"Set1\")\n  \n  # Use str() on Vocab to check out the structure\n  str(Vocab)\n  \n  # Plot education on x and vocabulary on fill\n  # Use the default brewed color palette\n  ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) + geom_bar(position = \"fill\") +\n    scale_fill_brewer()\n  \n  \n  # Bar plots with color ramp, part 2----\n  # Final plot of last exercise\n  ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +\n    geom_bar(position = \"fill\") +\n    scale_fill_brewer()\n  \n  # Definition of a set of blue colors\n  blues <- brewer.pal(9, \"Blues\")\n  \n  # Make a color range using colorRampPalette() and the set of blues\n  blue_range <- colorRampPalette(blues)\n  \n  # Use blue_range to adjust the color of the bars, use scale_fill_manual()\n  blue_range <- colorRampPalette(blues)\n  ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +\n    geom_bar(position = \"fill\") +\n    scale_fill_manual(values = blue_range(11))\n  \n  \n  # Overlapping histograms ----\n  # Basic histogram plot command\n  ggplot(mtcars, aes(mpg)) + \n    geom_histogram(binwidth = 1)\n  \n  # Expand the histogram to fill using am\n  ggplot(mtcars, aes(mpg, fill = factor(am))) + \n    geom_histogram(binwidth = 1)\n  \n  # Change the position argument to \"dodge\"\n  ggplot(mtcars, aes(mpg, fill = factor(am))) + \n    geom_histogram(binwidth = 1, position = \"dodge\")\n  \n  # Change the position argument to \"fill\"\n  ggplot(mtcars, aes(mpg, fill = factor(am))) + \n    geom_histogram(binwidth = 1, position = \"fill\")\n  \n  # Change the position argument to \"identity\" and set alpha to 0.4\n  ggplot(mtcars, aes(mpg, fill = factor(am))) + \n    geom_histogram(binwidth = 1, position = \"identity\", alpha = 0.4)\n  \n  # Change fill to cyl\n  ggplot(mtcars, aes(mpg, fill = factor(cyl))) + \n    geom_histogram(binwidth = 1, position = \"identity\", alpha = 0.4)\n  \n  \n  \n  # Line plots -----\n  # Print out head of economics\n  head(economics)\n  \n  # Plot unemploy as a function of date using a line plot\n  ggplot(economics, aes(x = date, y = unemploy)) +\n    geom_line()\n  \n  # Adjust plot to represent the fraction of total population that is unemployed\n  ggplot(economics, aes(x = date, y = unemploy/pop)) +\n    geom_line()\n  \n  \n  \n  \n  # !!!!! Periods of recession ----\n  # Expand the following command with geom_rect() to draw the recess periods\n  ggplot(economics, aes(x = date, y = unemploy/pop)) +\n    geom_line() + \n    geom_rect(data = recess, \n              inherit.aes = FALSE, \n              aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf), \n              fill = \"red\",\n              alpha = 0.2)\n  \n  \n  \n  \n  \n  \n  ",
    "created" : 1493761572880.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2202769218",
    "id" : "2A78D0CC",
    "lastKnownWriteTime" : 1494191058,
    "last_content_update" : 1494191058242,
    "path" : "C:/Users/d91067/Desktop/datacamp/DataVisualization/Data_Visualization_with_ggplot2/Data_Visualization_with_ggplot2_part1.R",
    "project_path" : "Data_Visualization_with_ggplot2_part1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}