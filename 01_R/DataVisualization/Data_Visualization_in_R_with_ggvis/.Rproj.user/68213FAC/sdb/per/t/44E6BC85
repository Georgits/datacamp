{
    "collab_server" : "",
    "contents" : "library(ggvis)\nlibrary(dplyr)\n\n# Chapter 1: The Grammar of Graphics ----\n# Load ggvis and start to explore ----\n# Change the code below to plot the disp variable of mtcars on the x axis\nmtcars %>% ggvis(~disp, ~mpg) %>% layer_points()\n\n\n# ggvis and its capabilities ----\n# The ggvis packages is loaded into the workspace already\n\n# Change the code below to make a graph with red points\nmtcars %>% ggvis(~wt, ~mpg, fill := \"red\") %>% layer_points()\n\n# Change the code below draw smooths instead of points\nmtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths()\n\n# Change the code below to make a graph containing both points and a smoothed summary line\nmtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths()\n\n\n\n# ggvis grammar ~ graphics grammar ----\n# Adapt the code: show bars instead of points\npressure %>% ggvis(~temperature, ~pressure) %>% layer_bars()\n\n# Adapt the code: show lines instead of points\npressure %>% ggvis(~temperature, ~pressure) %>% layer_lines()\n\n# Extend the code: map the fill property to the temperature variable\npressure %>% ggvis(~temperature, ~pressure, fill = ~ temperature) %>% layer_points()\n\n# Extend the code: map the size property to the pressure variable\npressure %>% ggvis(~temperature, ~pressure, size = ~ pressure) %>% layer_points()\n\n\nfaithful %>%\n  ggvis(~waiting, ~eruptions, fill := \"red\") %>%\n  layer_points() %>%\n  add_axis(\"y\", title = \"Duration of eruption (m)\",\n           values = c(2, 3, 4, 5), subdivide = 9) %>%\n  add_axis(\"x\", title = \"Time since previous eruption (m)\")\n\n\n\n\n# Three operators: %>%, = and := ----\n# Rewrite the code with the pipe operator\nfaithful %>% ggvis(~waiting, ~eruptions) %>% layer_points()\n\n# Modify this graph to map the size property to the pressure variable\npressure %>% ggvis(~temperature, ~pressure, size = ~ pressure) %>% layer_points()\n\n# Modify this graph by setting the size property\npressure %>% ggvis(~temperature, ~pressure, size := 100) %>% layer_points()\n\n# Fix this code to set the fill property to red\npressure %>% ggvis(~temperature, ~pressure, fill := \"red\") %>% layer_points()\n\n\n\n# Referring to different objects ----\n# Which of the commands below will create a graph that has green points? \nred <- \"green\"\npressure$red <- pressure$temperature\n\n# GRAPH A\npressure %>%\n  ggvis(~temperature, ~pressure,\n        fill = ~red) %>%\n  layer_points()\n\n# GRAPH B\npressure %>%\n  ggvis(~temperature, ~pressure,\n        fill = \"red\") %>%\n  layer_points()\n\n# GRAPH C\npressure %>%\n  ggvis(~temperature, ~pressure,\n        fill := red) %>%\n  layer_points()\n\n\n\n# Referring to different objects (2) ----\n# Which of the commands below will create a graph that uses color to reveal \n# the values of the temperature variable in the pressure data set?\nred <- \"green\"\npressure$red <- pressure$temperature\n\n# GRAPH A\npressure %>%\n  ggvis(~temperature, ~pressure,\n        fill = ~red) %>%\n  layer_points()\n\n# GRAPH B\npressure %>%\n  ggvis(~temperature, ~pressure,\n        fill = \"red\") %>%\n  layer_points()\n\n# GRAPH C\npressure %>%\n  ggvis(~temperature, ~pressure,\n        fill := red) %>%\n  layer_points()\n\n\n\n# Properties for points ----\n# You can manipulate many different properties when using \n# layer_points(), including x, y, fill, fillOpacity, opacity, shape, size, stroke, strokeOpacity, andstrokeWidth.\n\n# The shape property recognizes several different values: \n# circle (default), square, cross, diamond, triangle-up, and triangle-down.\n\n# Add code\nfaithful %>% ggvis(~waiting, ~eruptions, \n                   size = ~eruptions, \n                   opacity := 0.5, \n                   fill := \"blue\", \n                   stroke := \"black\") %>% \n  layer_points()\n\n# Add code\nfaithful %>% ggvis(~waiting, ~eruptions, \n                   fillOpacity = ~ eruptions, \n                   size := 100, \n                   fill := \"red\", \n                   stroke := \"red\", \n                   shape := \"cross\") %>% \n  layer_points()\n\n\n\n\n#Properties for lines ----\n# Update the code\npressure %>% ggvis(~temperature, ~pressure, stroke := \"red\", strokeWidth := 2, strokeDash := 6) %>% layer_lines()\n\n\n\n# Path marks and polygons ----\n# Update the plot\ntexas %>% ggvis(~long, ~lat, fill := \"darkorange\") %>% layer_paths()\n\n\n\n# Display model fits ----\n# Compute the x and y coordinates for a loess smooth line that predicts mpg with the wt\nmtcars %>% compute_smooth(mpg ~ wt)\n\n\n\n\n# compute_smooth() to simplify model fits -----\n# Extend with ggvis() and layer_lines()\nmtcars %>% compute_smooth(mpg ~ wt) %>% ggvis(~pred_, ~resp_) %>% layer_lines()\n\n# Extend with layer_points() and layer_smooths()\nmtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths()\n# Because first calling compute_smooth() and then layer_lines() can be a bit of a hassle, \n# ggvis features the layer_smooths() function: this layer automatically calls compute_smooth() in the background and plots \n# the results as a smoothed line.\n\n\n\n\n# Chapter 3: Transformations -----\n# Histograms (1) ----\n# Build a histogram with a binwidth of 5 units\nfaithful %>% ggvis(~waiting) %>% layer_histograms(width = 5)\n\n\n# Histograms (2) ----\n# Finish the command\nfaithful %>%\n  compute_bin(~waiting, width = 5) %>%\n  ggvis(x = ~xmin_, x2 = ~xmax_, y = 0, y2 = ~count_) %>%\n  layer_rects()\n# Well done! This is the same plot that you've coded up in the previous exercise.\n# Remember that there is no need to explicitly code the combination of compute_bin() and layer_rects(). \n# Unless you want to do special things, use layer_histograms().\n\n\n\n# Density plots ----\n# Build the density plot\nfaithful %>% ggvis(~waiting, fill := \"green\") %>% layer_densities()\n\n\n\n# !!!! Shortcuts -----\n# Instead of compute_smooth() and layer_lines(), you can use layer_smooths()\n# Instead of compute_bin() and layer_rects(), you can use layer_histograms()\n# Instead of compute_density() and layer_lines(), you can use layer_densities()\n\n\n# Simplify the code\nmtcars %>%\n  compute_count(~factor(cyl)) %>%\n  ggvis(x = ~x_, y = 0, y2 = ~count_, width = band()) %>%\n  layer_rects()\n\n# Simplified code\nmtcars %>%\n  ggvis(~factor(cyl)) %>%\n  layer_bars()\n\n\n\n\n# ggvis and group_by ----\n# Instruction 1\nmtcars %>% group_by(cyl) %>% ggvis(~mpg, ~wt, stroke = ~factor(cyl)) %>% layer_smooths()\n\n# Instruction 2\nmtcars %>% group_by(cyl) %>% ggvis(~mpg, fill = ~factor(cyl)) %>% layer_densities()\n\n\n\n\n# group_by() versus interaction() ----\n# Alter the graph\nmtcars %>% group_by(cyl, am) %>% ggvis(~mpg, fill = ~interaction(cyl, am)) %>% layer_densities()\n# Make sure you do not mix up group_by() and interaction(). The former is used to group observations, \n# while the latter allows you to specify properties.\n\n\n\n# Chaining is a virtue ----\nmtcars %>%\n  group_by(am) %>%\n  ggvis(~mpg, ~hp) %>%\n  layer_smooths(stroke = ~factor(am)) %>%\n  layer_points(fill = ~factor(am))\n\n\nmtcars %>%\n  group_by(am) %>%\n  ggvis(~mpg, ~hp) %>%\n  layer_points(fill = ~factor(am)) %>% \n  layer_smooths(stroke = ~factor(am))\n\n\n\n\n# Interactivity and Layers ----\n# Adapt the code: set fill with a select box\nfaithful %>%\n  ggvis(~waiting, ~eruptions, fillOpacity := 0.5,\n        shape := input_select(label = \"Choose shape:\",\n                              choices = c(\"circle\", \"square\", \"cross\",\n                                          \"diamond\", \"triangle-up\", \"triangle-down\")),\n        fill := input_select(label = \"Choose color:\",\n                             choices = c(\"black\", \"red\", \"blue\", \"green\"))) %>%\n  layer_points()\n\n# Add radio buttons to control the fill of the plot\nmtcars %>%\n  ggvis(~mpg, ~wt,\n        fill := input_radiobuttons(label = \"Choose color:\",\n                                   choices = c(\"black\", \"red\", \"blue\", \"green\"))) %>%\n  layer_points()\n\n\n\n# Input widgets in more detail ----\n# Change the radiobuttons widget to a text widget\nmtcars %>%\n  ggvis(~mpg, ~wt,\n        fill := input_text(label = \"Choose color:\",\n                           value = \"black\")) %>%\n  layer_points()\n\n\n\n# Input widgets in more detail (2) ----\n# Map the fill property to a select box that returns variable names\nmtcars %>%\n  ggvis(~mpg, ~wt,\n        fill = input_select(label = \"Choose fill variable:\",\n                            choices = names(mtcars),\n                            map = as.name)) %>%\n  layer_points()\n\n\n\n# Control parameters and values ----\n# Map the bindwidth to a numeric field (\"Choose a binwidth:\")\nmtcars %>%\n  ggvis(~mpg) %>%\n  layer_histograms(\n    width = input_numeric(label = \"Choose a binwidth:\",\n                          value = 1))\n\n\n# Control parameters and values ----\n# Map the binwidth to a slider bar (\"Choose a binwidth:\") with the correct specifications\nmtcars %>%\n  ggvis(~mpg) %>%\n  layer_histograms(width = input_slider(label = \"Choose a binwidth:\",\n                                        min = 1, max = 20,\n                                        value = 11))\n\n\n\n\n# Multi-layered plots and their properties ----\n# Add a layer of points to the graph below.\npressure %>%\n  ggvis(~temperature, ~pressure, stroke := \"skyblue\") %>%\n  layer_lines() %>%\n  layer_points()\n\n# Copy and adapt the solution to the first instruction below so that only the lines layer uses a skyblue stroke.\npressure %>%\n  ggvis(~temperature, ~pressure) %>%\n  layer_lines(stroke := \"skyblue\") %>%\n  layer_points()\n\n\n\n# Multi-layered plots and their properties (2) ---\n# Rewrite the code below so that only the points layer uses the shape property.\npressure %>%\n  ggvis(~temperature, ~pressure) %>%\n  layer_lines(stroke := \"skyblue\") %>%\n  layer_points(shape := \"triangle-up\")\n\n# Refactor the code for the graph below to make it as concise as possible\npressure %>%\n  ggvis(~temperature, ~pressure, stroke := \"skyblue\",\n        strokeOpacity := 0.5, strokeWidth := 5) %>%\n  layer_lines() %>%\n  layer_points(fill = ~temperature, size := 300,\n               shape := \"triangle-up\")\n\n\n\n\n# There is no limit on the number of layers! ----\n# Add more layers to the line plot\n# Add more layers to the line plot\npressure %>%\n  ggvis(~temperature, ~pressure) %>%\n  layer_lines(opacity := 0.5) %>%\n  layer_points() %>%\n  layer_model_predictions(model = \"lm\", stroke := \"navy\") %>%\n  layer_smooths(stroke := \"skyblue\")\n\n\n\n# Taking local and global to the next level ----\npressure %>%\n  ggvis(~temperature, ~pressure, stroke := \"darkred\") %>%\n  layer_lines(stroke := \"orange\", strokeDash := 5, strokeWidth := 5) %>%\n  layer_points(size := 100, fill := \"lightgreen\", shape := \"circle\") %>%\n  layer_smooths()\n\n\n\n\n# Chapter 5: Customizing Axes, Legends, and Scales ----\n# Axes ----\n# Change the axes of the plot as instructed\nfaithful %>% \n  ggvis(~waiting, ~eruptions) %>% \n  layer_points() %>%\n  add_axis(\"x\", \n           title = \"Time since previous eruption (m)\", \n           values = c(50, 60, 70, 80, 90), \n           subdivide = 9,\n           orient = \"top\") %>%\n  add_axis(\"y\", \n           title = \"Duration of eruption (m)\", \n           values = c(2, 3, 4, 5), \n           subdivide = 9,\n           orient = \"right\")\n\n\n\n# Legends ----\n# Add a legend\nfaithful %>% \n  ggvis(~waiting, ~eruptions, opacity := 0.6, \n        fill = ~factor(round(eruptions))) %>% \n  layer_points() %>%\n  add_legend(\"fill\", title = \"~ duration (m)\", orient = \"left\")\n\n\n# Legends (2) ----\n# Fix the legend\nfaithful %>% \n  ggvis(~waiting, ~eruptions, opacity := 0.6, \n        fill = ~factor(round(eruptions)), shape = ~factor(round(eruptions)), \n        size = ~round(eruptions))  %>%\n  layer_points() %>%\n  add_legend(c(\"fill\", \"shape\", \"size\"), title = \"~ duration (m)\")\n\n\n\n\n# Scale types ----\n# Add a scale_numeric()\nmtcars %>% \n  ggvis(~wt, ~mpg, fill = ~disp, stroke = ~disp, strokeWidth := 2) %>%\n  layer_points() %>%\n  scale_numeric(\"fill\", range = c(\"red\", \"yellow\")) %>%\n  scale_numeric(\"stroke\", range = c(\"darkred\", \"orange\"))\n\n# Add a scale_numeric()\nmtcars %>% ggvis(~wt, ~mpg, fill = ~hp) %>%\n  layer_points() %>%\n  scale_numeric(\"fill\", range = c(\"green\", \"beige\"))\n\n# Add a scale_nominal()\nmtcars %>% ggvis(~wt, ~mpg, fill = ~factor(cyl)) %>%\n  layer_points() %>%\n  scale_nominal(\"fill\", range = c(\"purple\", \"blue\", \"green\"))\n\n\n\n\n# Adjust any visual property -----\n# Add a scale to limit the range of opacity \nmtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%\n  layer_points() %>%\n  scale_numeric(\"opacity\", range = c(0.2, 1))\n\n\n\n# Adjust any visual property (2) ----\n# Add a second scale to set domain for x\nmtcars %>% ggvis(~wt, ~mpg, fill = ~disp) %>%\n  layer_points() %>%\n  scale_numeric(\"y\", domain = c(0, NA)) %>%\n  scale_numeric(\"x\", domain = c(0,6))\n\n\n\n\n\n# \"=\" versus \":=\" ----\n# We prepared a new version of mtcars that contains a color column with valid color names\n# mtcars contains column color\nmtcars %>% \n  ggvis(x = ~wt, y = ~mpg, fill = ~color) %>% \n  layer_points()\n\n# Set the fill instead of mapping it\nmtcars %>% \n  ggvis(x = ~wt, y = ~mpg, fill := ~color) %>% \n  layer_points()\n",
    "created" : 1502018803744.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2904392520",
    "id" : "44E6BC85",
    "lastKnownWriteTime" : 1502312819,
    "last_content_update" : 1502312819747,
    "path" : "C:/Users/d91067/Desktop/datacamp/DataVisualization/Data_Visualization_in_R_with_ggvis/Data_Visualization_in_R_with_ggvis.R",
    "project_path" : "Data_Visualization_in_R_with_ggvis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}